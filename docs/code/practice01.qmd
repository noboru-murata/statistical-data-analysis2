---
title: "第1講 練習問題"
subtitle: "統計データ解析"
date: "`r Sys.Date()`"
format:
    html: 
      toc: true
      html-math-method: katex
      self-contained: true
      grid: 
        margin-width: 350px
execute: 
  echo: fenced
reference-location: margin
citation-location: margin
tbl-cap-location: margin
fig-cap-location: margin
warning: false
editor: visual
---

## Quartoの使い方

### Quarto とは

Quarto は Pandoc を利用した出版システムで，文章とプログラムをまとめて記述した上で，レポートやスライドあるいはWebページのような文書の作成を行うことができる． 同様な働きをするものとしては RStudio では R Markdown という形式が用意されているが，R 以外の言語 (Python や Julia) も利用できるという意味では R Markdown の発展形と捉えることもできる． R のプログラムを主として扱う形式である R Script でもプログラム中にコメントを残すことはできるが，コメントが多いとコードそのものが読み難いといった問題がある．

### Quarto の構造

Quarto は，文書全体の体裁を整えるための YAMLヘッダー，プログラムを記述するチャンク(chunk)，テキスト(markdown文)の3つの領域から構成される．

YAMLヘッダーは文書の先頭に置き，`---` と `---` の間に必要な事項を記述する． この文書のYAMLヘッダーは以下のように書かれている．

``` yaml
---
title: "統計データ解析"
subtitle: "第1講 サンプルコード"
date: "`r Sys.Date()`"
format:
    html:                     # <1>
      toc: true
      html-math-method: katex # <2>
      self-contained: true
      grid: 
        margin-width: 350px   # <3>
execute: 
  echo: fenced                # <4>
reference-location: margin    # <5>
citation-location: margin
tbl-cap-location: margin
fig-cap-location: margin
warning: false                # <6>
editor: visual
---
```

1.  HTML形式の文書を作成することを宣言する．
2.  TeXのレンダリングにKaTeXを利用する．
3.  右側に大き目のマージンを指定する．
4.  チャンク内の情報を全て表示するように指定する．
5.  脚注，文献，表や図の説明をマージンに表示する．
6.  作成した文書中に警告を表示しない．

チャンクは ```` ```{r} ```` (R言語の場合) と ```` ``` ```` の間にコードを記述する． 例えば，後の解析で共通に用いるパッケージ [^1] を読み込むには以下のように記述する．

[^1]: 以下ではこの他に `ggrepel` `broom` `MASS` などパッケージに含まれる関数の一部を利用するが，これらは個別に指定して利用する．

```{r}
library(conflicted) # 名前の衝突の警告を出してもらう
conflicts_prefer(
  dplyr::filter(),
  dplyr::select(),
)
library(tidyverse)  # tidyverseの基本パッケージ群の読み込み
library(ggfortify)  # 分析結果の視覚化にggplotを利用するためのパッケージ
library(GGally)     # ggplotで散布図などを作成するためのパッケージ
library(gt)         # 表を作成するためのパッケージ
#' macOSのための日本語表示の設定
if(Sys.info()["sysname"] == "Darwin") { # macOSか調べる
    theme_update(text = element_text(family = "HiraMaruProN-W4"))
    label_family <- "HiraMaruProN-W4"    
} else {label_family <- NULL}
```

Rのコードはパッケージ `knitr` [^2] を利用して処理される． また，文書全体を通して1つのプロセスが処理し，チャンク間で情報は共有されるため，前のチャンクでの計算結果を後のチャンクでも使うことができる．

[^2]: knitr のオプションと Quarto の関係は [Code Cells: Knitr](https://quarto.org/docs/reference/cells/cells-knitr.html) に詳しく記載されている．

テキストは一般的な markdown 文法で解釈される． 数式はTeXの基本的な記述を理解するので，簡単な数式をそのまま記述することができる． テキスト中の数式は `$ 数式 $` で，独立した数式は `$$ 数式 $$` で記述する．

::: callout-tip
### 数式の記述の例

正規分布は $\mathbb{R}=(-\infty,\infty)$ 上の確率分布で，平均 $\mu$ 分散 $\sigma^{2}$ である分布の密度関数は $$
    \phi(x) = \frac{1}{\sqrt{2\pi\sigma^{2}}}e^{-\frac{(x-\mu)^{2}}{2\sigma^{2}}}
$$ となる．
:::

### RStudio での利用

Quarto ファイルを開くと左上のペインに表示される． エディタの左上の `Source/Visual` で表示を切り替えることができる． また `Render` の右の設定で，文書の出力先 `Window/Viewer Pane`，チャンクの実行結果の出力先 `inline/console` を選択することができる．

## RStudio の基本的な使い方

### コンソール上での計算

与えられた式の計算を実行してみる．

```{r}
#' 1 x 2 + 3^2 の計算
1 * 2 + 3^2
#' sin(2π) の計算
sin(2*pi)
#' √2 + |-0.6| の計算
sqrt(2) + abs(-0.6)
```

::: callout-note
演算子の前後に空白があっても良い(空白は可読性のために適宜利用する)．

2文字以上の演算子の途中には空白は入れられない(例: 羃乗の別記法の"\*\*")．

πは `pi` として定義されている．

`e-16` は10の-16乗の意味である．

計算結果は数値誤差のため厳密に0にならないことがある． 利用環境下で扱うことのできる数値については ".Machine" に保存されている． 特に上記の丸め誤差については ".Machine\$double.eps" を参照せよ．
:::

### 関数の実行

引数が1つの関数の計算例は以下のようになる．

```{r}
#' 正弦関数(引数が1つ)の計算例
sin(x = pi/2) 
sin(pi/2) # 引数名は省略でき，前の行とこの行は同じ結果になる
```

以下は擬似コードなので， `a, b` を適当な数値に置き換えて実行しなさい．

```{r}
#| eval: false
#' 対数関数(引数が2つ)の計算例
log(a, b) # 底を b とする a の対数 
log(x = a, base = b) #上と同値
log(base = b, x = a) #上と同値(引数名があれば順序は自由に変えられる)
log(b, a) # = log(x=b,base=a) (引数名がなければ規定の順序で解釈される)
log(a) # 自然対数 =log(a,base=exp(1))
```

### ヘルプの使い方

ヘルプを参照する例は以下のようになる．

```{r}
#| eval: false
#' 関数 log() に関するヘルプの例
help(log) # Helpタブに結果は表示される
?log # 上と同値
example(log) # ヘルプ内の例を実行
help.search("log") # "log"に関連する項目は？
??"log" # 上と同値
```

### オブジェクトの操作

オブジェクトの代入の例は以下のようになる．

```{r}
#' 数値を変数 foo に代入する
(foo <- 3) # foo <- 3; print(foo) と等価
#' 変数 foo を用いて計算し，結果を bar に代入する
bar <- sin(2/3*pi) + cos(foo * pi/4) # 計算結果は表示されない
#' 変数 bar の内容を表示する
print(bar)
```

### 自作関数の定義

関数を定義するには関数 `function()` を用いる．

```{r}
#' 縦の長さ a, 横の長さ b (既定値は1) の長方形の面積
foo <- function(a, b = 1){ 
  out <- a * b 
  return(out) # 計算結果を外に返却
}
```

上記で定義した関数の実行例は以下のようになる．

```{r}
foo(2, 3) # foo(a = 2, b = 3) と同義
foo(2) # foo(a = 2, b = 1) と同義
```

関数名を付けない関数(無名関数)を作ることもできる．

```{r}
#' 変数や関数を定義して計算する方法
(x <- 1:10/10)
foo <- function(x) sin(x)/x # 式の計算結果を返却(returnを省略可)
foo(x)
#' 変数や関数を定義せずに計算する方法
(function(x) sin(x)/x)(1:10/10)
(\(x) sin(x)/x)(1:10/10) # R 4.1 以降の短縮表現
```

無名関数の典型的な使い方を例示する．

```{r}
#' 関数 1/(1+x^2) を区間 [0,1] で積分 (関数オブジェクトを渡す書き方)
f <- function(x) 1/(1+x^2) # 関数を定義
integrate(f, 0, 1) # pi/4 
#' 関数 e^(-x^2/2) を実軸全体で積分(Gauss積分) (関数を定義しない書き方)
integrate(\(x)exp(-x^2/2), -Inf, Inf) # sqrt(2*pi)
```
