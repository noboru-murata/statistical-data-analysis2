#+TITLE: 時系列解析
#+SUBTITLE: 推定と予測
#+AUTHOR: 村田 昇
#+EMAIL: noboru.murata@eb.waseda.ac.jp
#+DATE: 2020.12.25
:reveal:
#+INCLUDE: "./reveal.js/org/mycourse.org"
#+STARTUP: hidestars content
# C-c C-x C-v でinlineを切り替え
# <m C-i でlatex block (math env用)
# C-c '
:end:

* 講義の予定
  #+begin_src R :eval no :exports none :tangle yes
    ### 第13回 練習問題解答例
  #+end_src
  #+begin_src R :exports none
    setwd("~/Desktop/lectures/u-tokyo/autumn/slide")
  #+end_src
  - 第1日: 時系列のモデル
  - *第2日: モデルの推定と予測*
* COMMENT 今週の内容
  #+begin_src R :eval no :exports none :tangle yes
    ### 第13回 資料
  #+end_src
  #+begin_src R :exports none
    setwd("~/Desktop/lectures/mva/slide")
  #+end_src
  - 第1日: 時系列のモデル
  - *第2日: モデルの推定と予測*


#+begin_src R :eval no :exports none :tangle yes
  ### 第13回 練習問題解答例
#+end_src
#+begin_src R :exports none
  setwd("~/Desktop/lectures/u-tokyo/autumn/slide")
#+end_src


* 時系列解析の復習
** 時系列解析とは
   - 時系列データ
     - 時間軸に沿って観測されたデータ
     - 観測の順序に意味がある
     - 異なる時点間での観測データの従属関係が重要
     - 独立性にもとづく解析は行えない \\
       (そのままでは大数の法則や中心極限定理は使えない)
   - 時系列解析の目的
     - 時系列データの特徴を効果的に記述すること
     - 時系列モデルの推定と評価

** 時系列モデルと定常性
   - *確率過程*
     #+begin_quote
     時間を添え字として持つ確率変数列
     #+begin_src latex
       \begin{equation}
         X_{t},\;t=1,\dotsc,T
       \end{equation}
     #+end_src
     #+end_quote
   - *弱定常過程*: 以下の性質をもつ確率過程 \(X_t\)
     - \(X_{t}\)の平均は時点\(t\)によらない
     - \(X_{t}\)と\(X_{t+h}\)の共分散は時点\(t\)によらず時差\(h\)のみで定まる
     - 特に\(X_{t}\)の分散は時点\(t\)によらない (\(h=0\)の場合)
   - 多くの場合，弱定常性を考えれば十分なので
     単に *定常* ということが多い
   - 定常でない確率過程は *非定常* であるという

** ホワイトノイズ
   - 定義
     #+begin_quote
     平均\(0\)，分散\(\sigma^{2}\)
     である確率変数の
     確率分布\(P\)からの
     独立かつ同分布な確率変数列
     #+begin_src latex
       \begin{equation}
	 X_{t}
	 =
	 \epsilon_{t},
	 \quad
	 \epsilon_{t}
	 \overset{i.i.d.}{\sim} P
       \end{equation}
     #+end_src
     #+end_quote
     - 記号 \(\mathrm{WN}(0,\sigma^{2})\) で表記
     - *定常* な確率過程
** トレンドのあるホワイトノイズ
   - 定義
     #+begin_quote
     \(\mu,\alpha\) を定数として
     #+begin_src latex
       \begin{equation}
         X_{t}=\mu+\alpha t+\epsilon_{t},
         \quad
         \epsilon_{t}
         \sim
         \mathrm{WN}(0,\sigma^2)
       \end{equation}
     #+end_src
     で定義される確率過程
     #+end_quote
     - *非定常* な確率過程
     
** ランダムウォーク
   - 定義
     #+begin_quote
     \(X_0\) を定数もしくは確率変数として
     #+begin_src latex
       \begin{equation}
	 X_{t}=X_{t-1}+\epsilon_{t},
	 \quad
	 \epsilon_{t}
	 \sim
	 \mathrm{WN}(0,\sigma^2)
       \end{equation}
     #+end_src
     で帰納的に定義される確率過程
     #+end_quote
     - 分散が時間とともに増加・記憶のあるモデル
     - *非定常* な確率過程

** 自己回帰過程
   - 定義 (次数\(p\)のARモデル)
     #+begin_quote
     \(a_1,\dotsc,a_p\)を定数とし，
     \(X_1,\dotsc,X_p\)が初期値として与えられたとき，
     #+begin_src latex
       \begin{equation}
	 X_{t}=a_1X_{t-1}+\cdots+a_pX_{t-p}+\epsilon_{t},
	 \quad
	 \epsilon_{t}
	 \sim
	 \mathrm{WN}(0,\sigma^2)
       \end{equation}
     #+end_src
     で帰納的に定義される確率過程
     #+end_quote
     - ランダムウォークの一般化
     - 無限長の記憶のある(忘却しながら記憶する)モデル
     - *定常にも非定常にもなる*

** 移動平均過程
   - 定義 (次数\(q\) のMAモデル)
     #+begin_quote
     \(b_1,\dotsc,b_q\)を定数とし，
     \(X_1,\dotsc,X_q\)が初期値として与えられたとき
     #+begin_src latex
       \begin{equation}
	 X_{t}
	 =
	 b_1\epsilon_{t-1}+\cdots+b_q\epsilon_{t-q}+\epsilon_{t},
	 \quad
	 \epsilon_{t}
	 \sim
	 \mathrm{WN}(0,\sigma^2)
       \end{equation}
     #+end_src
     で定義される確率過程
     #+end_quote
     - 有限長の記憶のあるモデル
     - *定常* な確率過程

** 自己回帰移動平均過程
   - 定義 (次数\((p,q)\)のARMAモデル)
     #+begin_quote
     \(a_1,\dotsc,a_p,b_1,\dotsc,b_q\) を定数とし，
     \(X_1,\dotsc,X_{\max\{p,q\}}\) が初期値として与えられたとき
     #+begin_src latex
       \begin{align}
	 X_{t}
	 &=
	   a_1X_{t-1}+\cdots+a_pX_{t-p}\\
	 &\quad+
	   b_1\epsilon_{t-1}+\cdots+b_q\epsilon_{t-q}
	   +\epsilon_{t},\\
	 &\quad
	   \epsilon_{t}
	   \sim
	   \mathrm{WN}(0,\sigma^2)
       \end{align}
     #+end_src
     で帰納的に定まる確率過程
     #+end_quote
     - AR・MAモデルの一般化・基本的な時系列モデル
     - *定常にも非定常にもなる*

** 自己共分散・自己相関
   - 弱定常な確率過程: \(X_{t},\;t=1,\dotsc,T\)
     - \(X_{t}\) と \(X_{t+h}\) の共分散は時点\(t\)によらずラグ\(h\)のみで定まる
       #+begin_quote
       *自己共分散* (定常過程の性質よりラグは\(h\ge0\)を考えればよい)
       #+begin_src latex
	 \begin{equation}
	   \gamma(h)
           =
	   \mathrm{Cov}(X_{t},X_{t+h})
	 \end{equation}
       #+end_src
       #+end_quote
     - \(X_{t}\) と \(X_{t+h}\) の相関も\(t\)によらずラグ\(h\)のみで定まる
       #+begin_quote
       *自己相関*
       #+begin_src latex
	 \begin{equation}
           \rho(h)
	   =\gamma(h)/\gamma(0)
           =
	   \mathrm{Cov}(X_{t},X_{t+h})/\mathrm{Var}(X_{t})
	 \end{equation}
       #+end_src
       #+end_quote
   - 異なる時点間での観測データの従属関係を要約するための最も基本的な統計量
     

* 実習
** R: 関数 ~acf()~
   - 自己相関・自己共分散の計算
     #+begin_src R :eval no
       acf(x, lag.max = NULL,
           type = c("correlation", "covariance", "partial"),
           plot = TRUE, na.action = na.fail, demean = TRUE, ...)
       ## x: 時系列データ
       ## lag.max: 計算するラグの最大値
       ## type: 標準は相関, 共分散と偏相関を選ぶこともできる
       ## plot: 描画するか否か
       ## na.action: 欠損値の処理，標準は欠損を含むと計算しない
       ## demean: 共分散の計算において平均を引くか否か
     #+end_src
     - 詳細は ~?acf~
** 練習問題
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   - 以下の問に答えなさい
     - 同じAR過程のモデルから生成した時系列の自己相関を比較しなさい
       (前の練習問題を利用すればよい)
     - MA過程についても同様な比較を行いなさい
     - ARMA過程についても同様な比較を行いなさい
     #+begin_src R :eval no :exports none :tangle yes
       ### 練習12.3
       ### 自己相関

       ## ARMA過程を生成する関数
       myARMA <- function(a, b, epsilon){
           p <- length(a)
           q <- length(b)
           r <- max(p,q)
           Tmax <- length(epsilon) # 時系列の長さを取得
           x <- double(Tmax)
           x[1:r] <- epsilon[1:r]
           for(t in (r+1):Tmax) {
               x[t] <- a %*% x[t-1:p] + b %*% epsilon[t-1:q] + epsilon[t]
           }
           return(x)
       }

       Tmax <- 200 # 時系列の長さ t=1,..,Tmax
       K <- 4 # 表示する時系列の数 (4つを並べて比較する)
       library(RColorBrewer)
       myCol <- brewer.pal(K,"Dark2") 
       df.ar <- ts(replicate(K, myARMA(a=c(0.67, 0.26), b=c(0),
                                       epsilon=rnorm(Tmax))))
       df.ma <- ts(replicate(K, myARMA(a=c(0), b=c(0.44, 0.08),
                                       epsilon=rnorm(Tmax))))
       df.arma <- ts(replicate(K, myARMA(a=c(0.8, -0.64), b=c(-0.5),
                                         epsilon=rnorm(Tmax))))
       
       ### AR(2)モデルの自己相関
       orgpar <- par(mfrow=c(2,2)) # グラフを2x2(行方向の順)に並べる
       for(i in 1:K) {
	 acf(df.ar[,i], col=myCol[i], main=paste("AR series",i))
       }
       par(orgpar) # もとのparの内容に戻す

       ### MA(2)モデルの自己相関
       orgpar <- par(mfrow=c(2,2))
       for(i in 1:K) {
	 acf(df.ma[,i], col=myCol[i], main=paste("MA series",i))
       }
       par(orgpar) # もとのparの内容に戻す

       ### ARMA(2,1)モデルの自己相関
       orgpar <- par(mfrow=c(2,2))
       for(i in 1:K) {
	 acf(df.arma[,i], col=myCol[i], main=paste("ARMA series",i))
       }
       par(orgpar) # もとのparの内容に戻す
     #+end_src


* モデルの推定
** 自己共分散・自己相関
   - 平均\(0\)の弱定常な確率過程: \(X_{t},\;t=1,\dotsc,T\)
     - \(X_{t}\) と \(X_{t+h}\) の共分散は時点\(t\)によらずラグ\(h\)のみで定まる
       #+begin_quote
       *自己共分散* 
       #+begin_src latex
	 \begin{equation}
	   \gamma(h)
           =
	   \mathrm{Cov}(X_{t},X_{t+h})
           =
           \mathbb{E}[X_{t}X_{t+h}]
	 \end{equation}
       #+end_src
       #+end_quote
     - \(X_{t}\)と\(X_{t+h}\)の相関も\(t\)によらずラグ\(h\)のみで定まる
       #+begin_quote
       *自己相関係数*
       #+begin_src latex
	 \begin{equation}
	   \rho(h)
           =\mathrm{Cov}(X_{t},X_{t+h})/\mathrm{Var}(X_{t})
	   =\gamma(h)/\gamma(0)
	 \end{equation}
       #+end_src
       #+end_quote

** 自己共分散とARモデル
   - AR(p)モデル: 
     #+begin_quote
     #+begin_src latex
       \begin{equation}
         X_{t}
         =
         a_{1}X_{t-1}+a_{2}X_{t-2}+\dotsb+a_{p}X_{t-p}+\epsilon_{t}
       \end{equation}
     #+end_src
     #+end_quote
   - 係数と自己共分散の関係
     # ラグ\(h>0\)の自己共分散
     #+begin_quote
     #+begin_src latex
       \begin{align}
         \gamma(h)
         &=
           \mathbb{E}[X_{t}X_{t+h}]\\
         &=
           \mathbb{E}[X_{t}(a_{1}X_{t+h-1}+\dotsb+a_{p}X_{t+h-p}+\epsilon_{t+h})]\\
         &=
           a_{1}\mathbb{E}[X_{t}X_{t+h-1}]
           +\dotsb
           +a_{p}\mathbb{E}[X_{t}X_{t+h-p}]
           +\mathbb{E}[X_{t}\epsilon_{t+h}]\\
         &=
           a_{1}\gamma(h-1)
           +\dotsb+
           a_{p}\gamma(h-p)
       \end{align}
     #+end_src
     #+end_quote
** Yule-Walker方程式
   - \(1\le h\le p\) を考えると以下の関係が成り立つ
     #+begin_quote
     #+begin_src latex
       \begin{equation}
         \begin{pmatrix}
           \gamma(1)\\
           \gamma(2)\\
           \vdots\\
           \gamma(p)
         \end{pmatrix}
         =
         \begin{pmatrix}
           \gamma(0)&\gamma(-1)&\dots&\gamma(-p+1)\\
           \gamma(1)&\gamma(0)&\dots&\gamma(-p+2)\\
           \vdots&\vdots&\ddots&\vdots\\
           \gamma(p-1)&\gamma(p-2)&\dots&\gamma(0)
         \end{pmatrix}
         \begin{pmatrix}
           a_{1}\\
           a_{2}\\
           \vdots\\
           a_{p}
         \end{pmatrix}
       \end{equation}
     #+end_src
     #+end_quote
     - 行列は Toeplitz 行列と呼ばれる
     - 行列が正則ならばARの係数は一意に決まる

** 偏自己相関
   - AR(p)モデル: 
     #+begin_quote
     #+begin_src latex
       \begin{equation}
         X_{t}
         =
         a_{1}X_{t-1}+a_{2}X_{t-2}+\dotsb+a_{p}X_{t-p}+\epsilon_{t}
       \end{equation}
     #+end_src
     #+end_quote
     - ラグ\(p\)の *自己相関係数* (特殊な解釈)
       #+begin_quote
       \(a_{1}=a_{2}=\dotsb=a_{p-1}=0\)のときの\(a_{p}\)
       #+begin_src latex
         \begin{equation}
           \mathbb{E}[X_{t}X_{t+p}]=a_{p}\mathbb{E}[X_{t}X_{t}]
           \;\Rightarrow\; \gamma(p)=a_{p}\gamma(0)
           \;\Rightarrow\; \rho(p)=a_{p}
         \end{equation}
       #+end_src
       #+end_quote
     - ラグ\(p\)の *偏自己相関係数*
       #+begin_quote
       AR(p)モデルを仮定したときの\(a_{p}\)の推定値
       (Yule-Walker方程式の解)
       #+end_quote
       
** COMMENT 追加の説明
   - 最小二乗も書くか
   - 予測誤差の平方和の最小化
   - 回帰と同じだけれど多重共線性があること
   - それ以外にもいろいろあること
   - モデルは近似
   - ずれかたでどの推定が良いかは異なること
   
* 実習
** R: ARモデルの推定 ~ar()~ 
   - 定常ARモデルのあてはめ
     #+begin_src R :eval no
       ar(x, aic = TRUE, order.max = NULL, method = "yule-walker")
       ## x: 時系列データ (ts クラスが望ましい)
       ## aic: AICを計算するか否か
       ## order.max: 計算すべき最大次数 (既定値は時系列の長さから規則的に計算)
       ## method: 計算方法，他に "burg", "ols", "mle" が指定できる
       est <- ar(x) # 時系列xの係数を推定する
       acf(resid(est)) # 残差(epsilonの推定値に相当)がホワイトノイズか確認する
     #+end_src
     - AICを用いて次数を自動決定することができる
** COMMENT 演習: ARモデルの推定
   :PROPERTIES:
   :reveal_background: #EEEEFF
   :END:
   - [[./code/14-arest.r][14-arest.r]] を確認してみよう

** R: ARIMAモデルの推定 ~arima()~
   - 階差系列への定常ARMAモデルのあてはめ: ~stats::arima()~
     #+begin_src R :eval no
       arima(x, order = c(0L, 0L, 0L),
             seasonal = list(order = c(0L, 0L, 0L), period = NA))
       ## x: 時系列データ (ts クラスが望ましい)
       ## order: 次数 c(AR,階差,MA)
       ## seasonal: 次数と期間 list(order=(AR,階差,MA),period=期間)
     #+end_src
     - 関数 ~arima()~ には次数の決定機能はない
     - 試行錯誤による次数の決定が必要
** R: ARIMAモデルの推定 ~forecast::auto.arima()~
   - パッケージ ~forecast~ の利用
     #+begin_src R :eval no
       ## 右下ペインの package タブから forecast をインストール
       ## install.packages("forecast") 
       library(forecast)
       auto.arima(x, d=1, D=1)
       ## x: 時系列データ
       ## d: 定常化のための階差回数
       ## D: 季節成分(周期成分)の定常化のための階差回数
     #+end_src
     - 次数を自動決定することができる

** COMMENT 演習: ARIMAモデルの推定
   :PROPERTIES:
   :reveal_background: #EEEEFF
   :END:
   - [[./code/14-armaest.r][14-armaest.r]] を確認してみよう

** 練習問題
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   - 先週作成した関数 ~myARMA()~ を利用して以下の問に答えなさい
     - AR過程を生成し，関数 ~ar()~ を用いて係数を推定しなさい
     - ARMA過程を生成し，関数 ~arima()~ および
       関数 ~auto.arima()~ を用いて係数を推定しなさい
     - 推定結果の妥当性を残差の自己相関係数を調べることによって確認しなさい
     #+begin_src R :eval no :exports none :tangle yes
       ### 練習1.1
       ### ARMAモデルの推定

       ## ARMA過程を生成する関数
       myARMA <- function(a, b, epsilon){
           p <- length(a)
           q <- length(b)
           r <- max(p,q)
           Tmax <- length(epsilon) # 時系列の長さを取得
           x <- double(Tmax)
           x[1:r] <- epsilon[1:r]
           for(t in (r+1):Tmax) {
               x[t] <- a %*% x[t-1:p] + b %*% epsilon[t-1:q] + epsilon[t]
           }
           return(x)
       }

       ## AR(2)過程の生成 (以下は前回の例を利用，自由に変更せよ)
       x.ar <- ts(myARMA(a=c(0.67, 0.26),
                         b=0,
                         epsilon=rnorm(1000))) # 時系列の長さも自由に変更せよ
       ## 関数 ar による自動推定
       est.ar <- ar(x.ar) 
       print(est.ar) # ある程度長い系列であれば良い推定が得られる

       ## ARMA(2,1)過程の生成
       x.arma <- ts(myARMA(a=c(0.8, -0.64),
                           b=c(-0.5),
                           epsilon=rnorm(1000))) 
       ## 関数 arima による手動推定
       est.arma0 <- arima(x.arma, order=c(2, 0, 1)) # 正しいモデル
       est.arma1 <- arima(x.arma, order=c(3, 0, 1))
       est.arma2 <- arima(x.arma, order=c(2, 0, 2))
       print(est.arma0)
       print(est.arma1)
       print(est.arma2)
       ## 尤度(likelihood)は大きい方が観測データへのあてはまりは良い
       ## AICは小さい方が良い予測が良いことが期待される

       ## 関数 auto.arima による自動推定
       ## パッケージの読み込み
       library(forecast) # 既に読み込んでいれば不要 
       est.arma <- auto.arima(x.arma, d=0, D=0)
       print(est.arma)
       ## 必ずしも正しいモデルが推定される訳ではないことに注意
       ## 特に短い時系列では推定が難しい場合が多い
       ## 生成する系列の長さを変えて実験してみよう

       ## 自己相関係数による評価
       plot(x.arma) # 元の時系列
       acf(x.arma)  # 元の時系列の自己相関
       plot(resid(est.arma)) # 推定されたモデルの残差
       acf(resid(est.arma))  # 推定されたモデルの残差の自己相関
       ## 残差は無相関になっていることが確認できる
     #+end_src

** 非定常過程の変換
   - 定常過程とみなせるように変換して分析
     - 階差の利用
       #+begin_quote
       #+begin_src latex
	 \begin{equation}
           X_{t}=X_{t-1}+\epsilon_{t}
           \quad\Rightarrow\quad
           Y_{t}=X_{t}-X_{t-1}=\epsilon_{t}
         \end{equation}
       #+end_src
       #+end_quote
       - ランダムウォーク: 階差をとるとホワイトノイズ(定常過程)
       - *ARIMA過程*: 階差をとるとARMA過程になる確率過程 
     - 対数変換の利用
       #+begin_quote
       #+begin_src latex
	 \begin{equation}
           X_{t}=(1+\epsilon_{t})X_{t-1}
           \quad\Rightarrow\quad
           Y_{t}=\log(X_{t})-\log(X_{t-1})
           =\log(1+\epsilon_{t})
           \simeq\epsilon_{t}
         \end{equation}
       #+end_src
       #+end_quote
       - 対数変換と階差で微小な比率の変動を抽出
    
** R: 関数 ~zoo()~
   - 時系列クラス ~zoo~ を作成する関数
     #+begin_src R :eval no
       library(zoo) # forecast を利用すると自動的に読み込まれる
       zoo(x = NULL, order.by = index(x), frequency = NULL, ...)
       ## x: ベクトル，行列
       ## order.by: 成分の目盛
       ## frequency: 季節成分の周期
       x.zoo <- zoo(x, # データに日付の情報を付加する例 (Dateクラスで指定)
                    order.by = seq(from=as.Date("2020-01-01"), 
                                   to=as.Date("2020-12-31"), by=1))
       start(x.zoo) # index(x.zoo)[1] 最初の日付
       end(x.zoo) # index(x.zoo)[length(x.zoo)] 最後の日付
     #+end_src
     - その他の詳細は ~?zoo~ 

** R: 関数 ~window()~
   - 時系列から部分系列を切り出す関数
     #+begin_src R :eval no
       window(x, start = NULL, end = NULL)
       ## x: ベクトル，行列
       ## start: 開始時点
       ## end: 終了時点
       window(x, # データに日付の情報が入っている場合 (zooの例)
              start="2020-12-01", # Dateクラスの標準の書き方
              end="2020/12/31") # Dateクラスはこちらでも解釈可能
     #+end_src
     - その他の詳細は ~?stats::window~ 

** 練習問題
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   - 東京の気候データを用いて以下の問に答えなさい
     #+begin_src R :eval no
       TW.data <- read.csv("data/tokyo_weather_reg.csv")
     #+end_src
     - 気温のデータを ~zoo~ クラスに変換しなさい
     - 気温のデータおよびその階差の性質を検討しなさい
     - 関数 ~auto.arima()~ を用いてモデルを作成しなさい
      #+begin_src R :eval no :exports none :tangle yes
	### 練習1.2
	### 東京の気温データの時系列モデル

	## パッケージの読み込み
	library(forecast) # 既に読み込んでいれば不要 
	TW.data <- read.csv("data/tokyo_weather_reg.csv")
	TW.zoo <- with(TW.data,
		       zoo(temp,
			   order.by = as.Date(date)))

	## データの視覚化を行う
	plot(TW.zoo, col="red",
	     xlab="month", ylab="degree", main="Temperature in Tokyo")
	plot(window(TW.zoo, # 一部を切り出して視覚化する
		    start=as.Date("2019-06-01"),
		    end=as.Date("2019-07-31")),
	     col="red",
	     xlab="date", ylab="degree", main="Temperature (June-July)")
	acf(TW.zoo)       # 減衰が遅いので差分をとった方が良さそう
	plot(diff(TW.zoo)) # 階差系列の視覚化
	acf(diff(TW.zoo))  # 階差系列の自己相関

	## 階差系列にARMAモデルをあてはめる (d=1)
	TW.fit <- auto.arima(TW.zoo, d=1, D=0)
	summary(TW.fit) # 推定されたモデルの仕様を表示
	acf(resid(TW.fit)) # そこそこあてはまりは良さそう
     #+end_src


* モデルによる予測
** モデルによる予測
   - 推定したモデルを用いて\(n\)期先を予測
     - ARモデル: 観測時点までの観測値を用いて回帰
     - MAモデル: 観測時点までのホワイトノイズで回帰
     - ARMAモデル: 上記の複合
   - いずれも \(n\)が大きいと不確定性が増大
   - 階差による変換は累積(階差の逆変換)により推定
** 分解による予測
   - トレンド成分+季節成分+ランダム成分への分解
     #+begin_quote
     #+begin_src latex
       \begin{equation}
         X_{t}=T_{t}+S_{t}+R_{t}
       \end{equation}
     #+end_src
     #+end_quote
     - トレンド成分: 時間の関数やランダムウォークなどを想定
     - 季節成分: 周期的な関数を想定
     - ランダム成分: ARMAモデルなどを想定
   - 分解の考え方
     - ランダム成分: 適切な幅の移動平均が0
     - 季節成分: 1周期の平均が0

* 実習
** R: 時系列の予測 ~predict()~
   - 推定されたモデルによる予測
     #+begin_src R :eval no
       predict(object, newdata, n.ahead = 1, se.fit = TRUE, ...)
       ## object: ar また arima による推定結果
       ## newdata: 予測対象のデータ (arの場合のみ)
       ## n.ahead: n期先の予測
       ## se.fit: 標準誤差を付加するか否か
       x.fit <- arima(x, order=c(0,1,1),
                      seasona=list(order=c(0,1,1), period=12))
       x.prd <- predict(x.fit, n.ahead=10)
       x.prd$pred # 予測値 (標準誤差は $se)
     #+end_src
     - 詳細は ~?predict.ar, ?precidt.Arima~

** R: 時系列の予測 ~forecast()~
   - パッケージ ~forecast~ の利用
     #+begin_src R :eval no
       forecast(object, h)
       ## object: ar また arima による推定結果
       ## h: h期先の予測 (指定しないと2周期または10期先を予測)
       x.fit <- auto.arima(x, d=1, D=1)
       x.prd <- forecast(x.fit, h=10)
       x.prd$mean # 予測値 (信頼区間は $upper/$lower)
       plot(x.prd) # 全体を視覚化
     #+end_src
     - 詳細は ~?forecast~

** R: 時系列の分解 ~StructTS()~
   - トレンドの構造を仮定して分解する関数
     #+begin_src R :eval no
       StructTS(x, type = "level", fixed = NULL, ...)
       ## x: 時系列データ
       ## type: "level" 平均の変動をランダムウォークでモデル化
       ##       "trend" 平均と傾きをランダムウォークでモデル化
       ##       "BSM" 季節成分を含むモデル (frequencyが必要)
       ## fixed: ホワイトノイズの分散の指定
       x.sts <- StructTS(x, type = "trend", fixed = c(0.1,NA,NA))
       ## 平均のホワイトノイズの分散を0.1，傾きとランダム成分の分散は推定
       forecast(x.sts, h=10) # predictを使うことも可
     #+end_src
     - 詳細は ~?StructTS~
     - 分解を行う関数は ~decompose, stl~ などもある

** COMMENT 演習: 時系列の予測
   :PROPERTIES:
   :reveal_background: #EEEEFF
   :END:
   - [[./code/14-predict.r][14-predict.r]] を確認してみよう

** COMMENT 演習: 実データの予測
   :PROPERTIES:
   :reveal_background: #EEEEFF
   :END:
   - [[./code/14-airpass.r][14-airpass.r]] を確認してみよう

** 練習問題
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   - 東京の気候データを用いて以下の問に答えなさい
     - 6月までのデータを用いて適切なモデルを推定しなさい
     - 7月のデータの推定を行いなさい
      #+begin_src R :eval no :exports none :tangle yes
	### 練習2
	### 東京の気温の予測

	## パッケージの読み込み (既に読み込んでいれば不要)
	library(forecast) 

	## データの読み込み (既に行っていれば不要)
	TW.data <- read.csv("data/tokyo_weather_reg.csv")
	TW.zoo <- with(TW.data,
		       zoo(temp,
			   order.by = as.Date(date)))
	## データの整理
	TW.train <- window(TW.zoo, # 6月までのデータ (訓練データ)
			   end="2019-06-30")  
	TW.test  <- window(TW.zoo, # 7月のデータ (試験データ)
			   start="2019-07-01", end="2019-07-31") 

	## auto.arima による推定
	(TW.auto <- auto.arima(TW.train, d=1, D=0)) 
	(TW.fcst <- forecast(TW.auto, h=length(TW.test)))

	## 視覚化
	plot(TW.fcst) # X軸が無粋 (1970-01-01からの日数)

	## X軸の書き直し
	plot(TW.fcst, xaxt="n",
	     xlim=c(as.Date("2019-06-01"), as.Date("2019-07-31")))
	axis(side=1, # x軸を指定
	     at=index(TW.zoo), # 文字を書く座標軸上の位置
	     labels=index(TW.zoo), # ラベル
	     las=2, # 垂直に表示
	     cex.axis=0.7) # 文字の大きさを調整
	lines(TW.test, col="red") # 真値を重ね描き

	## 別の書き方
	plot(window(TW.zoo, start="2019-06-01", end="2019-07-31"),
	     col="darkgray",
	     xlab="date", ylab="temperature")
	with(TW.fcst, lines(mean, col="red", lwd=3))    # 予測値
	with(TW.fcst, lines(upper[,1], col="orange", lwd=3)) # +80%信頼区間
	with(TW.fcst, lines(upper[,2], col="orchid", lwd=3)) # +95%信頼区間
	with(TW.fcst, lines(lower[,1], col="orange", lwd=3)) # -80%信頼区間
	with(TW.fcst, lines(lower[,2], col="orchid", lwd=3)) # -95%信頼区間

	## StructTS による推定
	(TW.sts <- StructTS(TW.train, type="trend", fixed=c(0.1,NA,NA)))
	(TW.fsts <- forecast(TW.sts, h=length(TW.test)))

	## 分解結果の表示 
	plot(merge(TW.train, fitted(TW.sts)), col="blue")

	## 視覚化
	plot(TW.fsts, xaxt="n",
	     xlim=c(as.Date("2019-06-01"), as.Date("2019-07-31")))
	axis(side=1, # x軸を指定
	     at=index(TW.zoo), # 文字を書く座標軸上の位置
	     labels=index(TW.zoo), # ラベル
	     las=2, # 垂直に表示
	     cex.axis=0.7) # 文字の大きさを調整
	lines(TW.test, col="red") # 真値を重ね描き
     #+end_src
   
* COMMENT ローカル変数
# Local Variables:
# org-latex-listings: minted
# End:
