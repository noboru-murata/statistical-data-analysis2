#+TITLE: R言語速習
#+SUBTITLE: データの取り扱いと可視化
#+AUTHOR: 村田 昇
#+EMAIL: noboru.murata@eb.waseda.ac.jp
#+DATE: 
# Time-stamp: <2021-09-03 17:05:57 mura>
:REVEAL:
#+INCLUDE: "./reveal.js/org/mycourse.org"
#+STARTUP: hidestars content indent
# C-c C-x C-v でinlineを切り替え
# <m C-i でlatex block (math env用)
# C-c '
:END:

* 講義の内容
- データの取り扱い
- 描画の基礎

#+begin_src R :eval no :exports none :tangle yes
  ### 
  ### 第2講 サンプルコード
  ###
#+end_src
#+begin_src R :exports none
  setwd("~/Desktop/lectures/u-tokyo/autumn/slide")
  library(lubridate)
#+end_src

* COMMENT メモ
- 速習なので練習問題を多くしたい
- データの見直し(covid-19の最新のデータに変えるべきか?)
- 校正に関して記述
  

* データフレーム
#+begin_src R :exports none :tangle yes
  #### "データフレーム"
#+end_src

** データ構造
- Rに用意されている基本的なデータ構造
  - ベクトル (vector): 1次元配列
  - 行列 (matrix): 2次元配列
  - 配列 (array): 多次元配列
  - *データフレーム* (data frame): 表 (2次元配列)
- 特殊なもの
  - リスト (list): オブジェクトの集合 

** データフレーム
- 複数の個体について，いくつかの属性を集計した表
  - 長さの等しい列ベクトルをまとめたもの
  - 各列のデータ型はバラバラでも良い
- [[color:darkgreen][例: ある小学校の1年生の身長・体重・性別・血液型のデータ]]
- 実データは表形式であることが多いため最も一般的な形式

** データフレームの作成
- 方法はいくつか用意されている
  - 同じ長さのベクトルを並べる
  - データフレームを結合する
  - マトリクスを変換する (全て数字の場合)
  #+begin_src R :eval no :exports none :tangle yes
    ### データフレームの作成
  #+end_src
  #+begin_src R :eval no :tangle yes
    ## 同じ長さのベクトルを並べる
    ## (... <- ...) は代入した結果を表示
    (foo <- data.frame(one=c(1,2,3),two=c("AB","CD","EF"))) 
    (bar <- data.frame(three=c("x","y","z"),four=c(0.9,0.5,-0.3)))
    ## データフレームを結合する
    (baz <- cbind(foo,bar)) # column bind
  #+end_src

** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 次の表に対応するデータフレームを作成しなさい
  |---+------+------+------+-----|
  |   | math | phys | chem | bio |
  |---+------+------+------+-----|
  | A |   90 |   25 |   65 |  70 |
  | B |   80 |   50 |  100 |  50 |
  | C |   70 |   75 |   70 |  30 |
  | D |   60 |  100 |   40 |  80 |
  | E |   50 |   80 |   75 | 100 |
  |---+------+------+------+-----|

#+begin_src R :eval no :exports none :tangle yes
  ### 
  ### 練習問題 データフレームの作成
  ###

  ## 各項目が同じ長さのベクトルを並べる
  (grade <- data.frame( # 変数名は自由に決めてよい
     math=c(90,80,70,60,50),
     phys=c(25,50,75,100,80),
     chem=c(65,100,70,40,75),
     bio =c(70,50,30,80,100)))
  
  ## 行・列の名前の操作
  rownames(grade) # 行の名前を表示する
  rownames(grade) <- c("A","B","C","D","E") # 行の名前を変更する
  names(grade)    # 列の名前を表示する
  grade # 変更されたデータフレームを表示する
  ## データの取り出し方 (後ほど詳しく)
  grade["B","phys"] # 特定の要素を名前で参照する
  grade["C",] # 特定の行を表示
  grade["bio"] # 特定の列を表示(データフレームになる)
  grade[,"bio"] # 特定の列を表示(ベクトルになる)
  grade[["bio"]] # 上記と同じ操作
  grade$bio # 上記と同じ操作
#+end_src


* ファイルの操作
#+begin_src R :exports none :tangle yes
  #### "ファイルの操作"
#+end_src

** ファイルを用いたデータの読み書き
- 解析においてはデータファイルの操作が必要:
  - 整理したデータを保存する
  - 収集されたデータを読み込む
- Rで利用可能なデータファイル:
  - csv形式(comma separated values): テキストファイル
  - RData形式: Rの内部表現を用いたバイナリーファイル
  - Excel形式: Microsoft Excel ファイル (Filesタブから読み込み)

** 作業ディレクトリの確認と変更
- 作業ディレクトリとファイルに関する注意:
  - Rの処理は特定のフォルダ(*作業ディレクトリ*)内で実行される
  - ファイルは作業ディレクトリにあるものとして扱われる
  - 作業ディレクトリ以外のファイルを扱う場合はパスを含めて指定する必要がある
- 作業ディレクトリに関する操作:
  - 確認の仕方: コンソールの上部の表示
  - 変更の仕方: *Session* メニューを利用

** csv形式の操作 (テキスト)
- 関数 ~write.csv()~: csvファイルの書き出し
  #+begin_src R :eval no
    write.csv(x, file="ファイル名")
    ## x: 書き出すデータフレーム
    ## file: 書き出すファイルの名前 (作業ディレクトリ下，またはパスを指定)
  #+end_src
- 関数 ~read.csv()~: csvファイルの読み込み
  #+begin_src R :eval no
    y <- read.csv(file="ファイル名", header=TRUE, row.names=1)      
    ## y: 読み込む変数
    ## file: 書き出すファイルの名前 (作業ディレクトリ下，またはパスを指定)
    ## header: 1行目を列名として使うか否か
    ## row.names: 行名の指定 (行名を含む列番号/列名または行名のベクトル)
  #+end_src
- 他の細かいオプションはヘルプを参照

** RData形式の操作 (バイナリ)
- 関数 ~save()~: RDataファイルの書き出し
  #+begin_src R :eval no
    save(..., file="ファイル名")
    ## ...: 保存するオブジェクト名 (複数指定可，データフレーム以外も可)
    ## file: 書き出すファイルの名前 (作業ディレクトリ下，またはパスを指定)
  #+end_src
- 関数 ~load()~: RDataファイルの読み込む
  #+begin_src R :exports code
    load(file="ファイル名")
    ## file: 読み込むファイルの名前 (作業ディレクトリ下，またはパスを指定)
  #+end_src
- 複数のデータフレームを同時に扱うことができる

** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 前の演習で作成したデータフレームを適当なファイルに書き出しなさい
- 書き出したファイルから別の変数に読み込みなさい
- 厚労省からダウンロードしたファイル(~pcr_case_daily.csv~)を
  変数 ~PCR.data~ に読み込みなさい

#+begin_src R :eval no :exports none :tangle yes
  ### 
  ### 練習問題 ファイルの読み書き
  ###   前の練習問題で作ったデータフレームを利用する
  ###
  
  ### csv形式の操作
  ## 関数 write.csv の使い方 (ファイルの書き出し)
  dim(grade) # 大きさを確認
  write.csv(grade, file="data/mydata.csv")
  ## 関数 read.csv の使い方 (ファイルの読み込み)
  (grade2 <- read.csv(file="data/mydata.csv", row.names=1)) 
  dim(grade2) # 大きさが一致していることを確認
  grade2["A","math"] <- 100 # データの一部を修正
  grade2 # 中身を確認しておく
  
  ### Rdata形式の操作
  ## 関数 save の使い方 (ファイルの書き出し)
  save(grade, grade2, file="data/mydata.RData") 
  ## 関数 load の使い方 
  grade <- c(1,2,3) # 上書きしておく
  grade # 中身を確認しておく
  rm(grade2) # 消しておく
  grade2 # "オブジェクト 'grade2' がありません"というエラーになる 
  load(file="data/mydata.RData") # RData形式の読み込み
  grade # save したときの grade が復元されている
  grade2 # save したときの grade2 が復元されている
#+end_src
#+begin_src R :exports none :tangle yes
  ### download したファイルの読み込み
  ## ファイル名 pcr_case_daily.csv として作業ディレクトリの data に保存
  PCR.data <- read.csv(file="data/pcr_case_daily.csv") # 一般的な読み込み方
  ## 読み込めない場合は文字コードを指定する
  ## read.csv(file="data/pcr_case_daily.csv")
  ##          fileEncoding="shift-jis") # 文字コードの指定 (shift-jis/utf-8)
  PCR.colname <- names(PCR.data) # 機関名などの列名を保存しておく
  names(PCR.data) <- c("date",letters[1:(length(PCR.colname)-1)]) # 英語に付け替える
  head(PCR.data) # 中身を確認する
  ## 読み込み時に列名を指定することも可能 (以下は上記と同じ結果)
  PCR.data2 <- read.csv(file="data/pcr_case_daily.csv",
                   col.names=c("date",letters[1:(length(PCR.colname)-1)]))
  head(PCR.data2) # 中身を確認する
  ## Filesタブの操作で読み込みことも可能なので確認しなさい
  ## ただし tibble+data.frame オブジェクトになるので若干扱いが異なる
  ## URLを指定して読み込むこともできる (更新される情報を追い掛ける場合)
  ## PCR.data <- read.csv("https://www.mhlw.go.jp/content/pcr_case_daily.csv")
#+end_src


* データフレームの操作
#+begin_src R :exports none :tangle yes
  #### "データフレームの操作"
#+end_src

** 要素の選択
- 添字の番号を指定する (マイナスは除外)
- 論理値(TRUE/FALSE)で指定する
- 要素の名前で指定する
  #+begin_src R :eval no :exports none :tangle yes
    ### 要素の選択
  #+end_src
  #+begin_src R :eval no :tangle yes
    z <- data.frame(one=c(1,2,3), two=c("AB","CD","EF"), three=6:8)
    z[1, 2] # 1行2列の要素を選択
    z[-c(1,3),] # 1,3行を除外
    z[c(TRUE,FALSE,TRUE),] # 1,3行を選択
    z[, "two"]  # 列名"two"を選択(ベクトルになる)
    z[["two"]] # 上記と同様の結果となる(1列の場合しか使えない)
    z$two      # 上記と同様の結果となる(1列の場合しか使えない)
    z["two"]   # 列名"two"を選択(1列のデータフレームになる)
    z[, c("one","three")] # 列名"one"と"three"を選択(データフレームになる)
    z[c("one","three")]   # 上記と同様の結果となる
  #+end_src

** 部分集合の取得
- 関数 ~subset()~: 条件を指定して行と列を選択
  #+begin_src R :eval no
    subset(x, subset, select, drop=FALSE)
    ## x: データフレーム 
    ## subset: 行に関する条件
    ## select: 列に関する条件(未指定の場合は全ての列)
    ## drop: 結果が1行または1列となる場合にベクトルとして返すか否か
  #+end_src
- オプション ~subset~ の条件指定には以下を用いることができる
  - 等号: ~==~ (否定は ~!=~)
  - 不等号: ~<,>,<=,>=~
  - 論理式: ~&~ (かつ), ~|~ (または)

** COMMENT 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- ~datasets::mtcars~ から以下の条件を満たすデータを取り出しなさい
  - 例: オートマチック車(~am~ が0)のデータ
    #+begin_src R :eval no
      subset(mtcars, subset= am==0) # subset オプションに条件を指定する
    #+end_src
  - 例: 燃費(~mpg~)と重さ(~wt~)のデータ
    #+begin_src R :eval no
      subset(mtcars, select= c(mpg,wt)) # select オプションに列名を指定する
    #+end_src
  - 4気筒車(~cyl~ =4)の燃費(~mpg~)と排気量(~disp~)のデータ
  - 馬力(~hp~)が110(馬力)以上で重さ(~wt~)が3(1000lbs)以下のデータ
  #+begin_src R :eval no :exports none :tangle yes
    ### 練習3
    ### データフレームの操作
    ## datasets::mtcars の内容を確認する
    help(mtcars)
    
    ## 関数subsetの使い方
    ## 4気筒車の燃費と排気量
    subset(mtcars,
           subset= cyl==4,
           select= c(mpg,disp))
    ## 馬力が110[hp]以上で重さが3[1000lbs]以下のデータ
    subset(mtcars,
           subset= hp>=110 & wt<=3)
  #+end_src
** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- ~pcr_case_daily.csv~ から以下の条件を満たすデータを取り出しなさい
  - 関数 ~subset()~ の使用例
    #+begin_src R :eval no :tangle yes
      ## 国立感染症研究所(a)の検査件数が 0 でないデータ
      subset(PCR.data, subset= a!=0) # subset オプションに条件を指定する

      ## 検疫所(b)と民間検査会社(d)の検査件数データ
      subset(PCR.data, select= c(b,d)) # select オプションに列名を指定する
    #+end_src
  - 医療機関(~f~)での検査件数が2000を越えたときの
    国立感染症研究所(~a~)と医療機関(~f~)のデータ
  - 大学等(~e~)と医療機関(~f~)でともに検査件数が2000を越えたデータ

#+begin_src R :eval no :exports none :tangle yes
  ### 
  ### 練習問題 データフレームの操作
  ###
  
  ## 関数subsetの使い方
  ## 医療機関(f)での検査数が2000を越えたときの国立感染症研究所(a)と医療機関(f)のデータ
  subset(PCR.data,
         subset= f>2000,
         select= c(a,f))
  ## 大学等(e)と医療機関(f)でともに検査件数が2000を越えたデータ
  subset(PCR.data,
         subset= e>2000 & f>2000)
#+end_src


* データフレームの集約
#+begin_src R :exports none :tangle yes
  #### "データフレームの集約"
#+end_src

** 統計量の計算
- データを集約した値 = 統計量
  - 関数 ~sum()~: 総和を計算する
  - 関数 ~mean()~: 平均
  - 関数 ~max()~: 最大値
  - 関数 ~min()~: 最小値
  - 関数 ~median()~: 中央値
  - 関数 ~quantile()~: 分位点
- これ以外にも沢山あるので調べてみよう

** 行・列ごとの操作
- 関数 ~apply()~: 列または行ごとに計算を行う
  #+begin_src R :eval no
    apply(X, MARGIN, FUN) # 変数名が大文字で定義されている
    ## X: データフレーム
    ## MARGIN: 行(1)か列(2)かを指定
    ## FUN: 求めたい統計量を計算するための関数
  #+end_src
- 例: 学生の成績表 grade の各教科の平均値
  #+begin_src R :eval no :exports none :tangle yes
    ### 関数 apply() の使用例
    ## 学生の成績表 grade の各教科の平均値
  #+end_src
  #+begin_src R :eval no :tangle yes
    apply(X=grade, MARGIN=2, FUN=mean) 
    apply(grade, 2, mean) # 上記と同じ(変数名は省略可能)
  #+end_src

** グループごとの操作
- 関数 ~aggregate()~: 各行をいくつかのグループにまとめて計算を行う
  #+begin_src R :eval no
    aggregate(formula, data, FUN, ...,
              subset, na.action = na.omit)
    ## formula: 条件式
    ## data: データフレーム
    ## FUN: 求めたい統計量を計算するための関数
    ## subset: データフレームの行に関する条件
    ## na.action: 欠損値の扱い
  #+end_src
- 例: 月毎の医療機関のPCR件数の集計
  #+begin_src R :eval no :exports none :tangle yes
    ### 関数 aggregate() の使用例
    ## 月毎の医療機関のPCR数の集計
    library(lubridate) # 関数 month() などを利用可能とする
    PCR.data$date # 日付を取り出す
    month(PCR.data$date) # 月を取り出す
    transform(PCR.data,month=month(date)) # 列を追加
    ## 注意:
    ## transform は PCR.data の操作をしているので，dateだけで列名が指定できる
    ## lubridate の関数 month() は月名での表示も可能
    ## ただし名前は言語環境に依存するので注意
    ## month(foo,label=TRUE) # 短縮形
    ## month(foo,label=TRUE,abbr=FALSE) # 月名
    ## 強制的に英語にするには
    ## Sys.setlocale(category = "LC_TIME", locale="C")
    ## などを指定すればよい．もとに戻すには
    ## Sys.setlocale(category = "LC_TIME", locale="")
  #+end_src
  #+begin_src R :eval no :tangle yes
    aggregate(formula= f ~ month,
              data=transform(PCR.data,month=month(date)),
              FUN=sum)
  #+end_src

** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- ~pcr_case_daily.csv~ を以下の条件で整理しなさい
  - 各機関でのPCR検査件数の最大値
  - 2020年の月ごとの各機関でのPCR検査件数の最大値
- ~datasets::mtcars~ のデータを以下の条件で整理しなさい
  - 気筒数(~cyl~)ごとに排気量(~disp~)の最大値，最小値
  - 気筒数(~cyl~)とギア数(~gear~)ごとの燃費(~mpg~)の平均値

#+begin_src R :eval no :exports none :tangle yes
  ### 
  ### 練習問題 データフレームの集約
  ###
  
  ## 関数applyの使い方
  ## 各機関でのPCR検査件数の最大値
  apply(subset(PCR.data, select= -date), # date は文字列なので集計から除く
        2, # 列の計算
        max, na.rm=TRUE) # max の計算で NA を除く
  
  ## 関数aggregateの使い方
  ## 2020年の月ごとの各機関でのPCR検査件数の最大値
  aggregate(cbind(a,b,c,d,e,f,g) ~ month,
            transform(subset(PCR.data, year(date)==2020),
                      month=month(date)),
            max,
            na.action=na.pass) # NAだけの列があっても集計するための指定
  aggregate(. ~ date, # ちょっとした細工(上書き)で簡単になる
            transform(subset(PCR.data, year(date)==2020),
                      date=month(date)),
            max, na.action=na.pass)

  ## datasets::mtcars での例
  ## 気筒数ごとに排気量の最大値，最小値
  aggregate(disp ~ cyl,
            mtcars,
            max) 
  aggregate(disp ~ cyl,
            mtcars,
            min)
  aggregate(disp ~ cyl, # まとめて計算することも可能
            mtcars,
            function(x){return(c(max=max(x),min=min(x)))})
  ## 気筒数とギア数ごとの燃費の平均値
  aggregate(mpg ~ cyl + gear, # 条件を並べる場合は + を用いる
            mtcars,
            mean)
#+end_src


* 補足
- より詳細なデータの取り扱いについては以下を参照して下さい
  - 講義ノート
    - R言語の基礎 第3章 (pp29-52)
  - 統計データ解析I スライド 
    - 第1講 Rの基本的な操作
    - 第3講 データの整理と集計


* 描画の基礎
#+begin_src R :exports none :tangle yes
  #### "描画の基礎"
#+end_src

** データの可視化
- データ全体の特徴や傾向を把握するための直感的で効果的な方法
- R言語には極めて多彩な作図機能が用意されている
- 基本となるのは関数 ~plot()~ 
- 描画関連の関数は色，
  線種や線の太さ，
  図中の文字の大きさなどを指定することができる

** 基本的な描画 (ベクトル)
- ベクトルデータを左から等間隔で描画
  #+begin_src R :eval no
    plot(x, type="p", xlim=NULL, ylim=NULL,
         main=NULL, xlab=NULL, ylab=NULL, ...)
    ## x: ベクトル
    ## type: 描画タイプ．既定値は "p"(点プロット)．"l"(折れ線)など指定可
    ## xlim: x軸の範囲．既定値は自動的に決定
    ## ylim: y軸の範囲．既定値は自動的に決定
    ## main: 図のタイトル．既定値はタイトルなし
    ## xlab: x軸のラベル名．既定値は"Index"
    ## ylab: y軸のラベル名．既定値はxのオブジェクト名
    ## ...: 他のオプション．以下に例示．詳細は help(par) を参照
    ## col: 色の指定．"red"や"blue"など．指定可能な色は colors() を参照
    ## pch: 点の形．詳細は help(points) を参照
    ## cex: 文字の大きさ．既定値の何倍にするかを指定
    ## lty: 線のタイプ．実線・破線などを記号・数字で指定．詳細は help(par) を参照
    ## lwd: 線の太さ．数字で指定
  #+end_src

#+reveal: split
- 例: 民間検査会社(~d~)と医療機関(~f~)の検査件数の推移
  #+begin_src R :eval no :exports none :tangle yes
    ### 関数 plot() の使用例 (ベクトル) 
    ## 民間検査会社(d)と医療機関(f)の検査件数の関係
  #+end_src
  #+begin_src R :eval no :tangle yes
    plot(PCR.data$d, # データフレームからD列のベクトルを抽出
         type="l", col="blue") # 線での描画と色を指定
    lines(PCR.data$f, col="red") # 線を重ね描き
    ## 複数のデータを同時に描画する方法も用意されている
    matplot(PCR.data[-1], # データフレームから1列目を取り除いたデータフレームを作成
            type="l") # 線での描画を指定，色も個別に指定できる
  #+end_src

** COMMENT 基本的な描画 (関数)
- 1変数関数の範囲を指定して描画
  #+BEGIN_SRC R :exports code
    curve(fun,from=NULL,to=NULL, ...)
    ## fun: 1変数関数
    ## from: x軸の左端
    ## to: x軸の右端
    ## ...: "ベクトルの描画"と同じオプションが利用可能
    
    plot(fun, y=0, to=1, ...)
    ## curveとほぼ同様
    ## y: x軸の左端 (from=と書いても良い)
    
    ## 別の関数 f を重ね書きする場合
    curve(...,add=TRUE, ...)            
    plot(...,add=TRUE, ...)            
  #+END_SRC

** 基本的な描画 (散布図)
- 点 $(x_1,y_1),\dotsc,(x_N,y_N)$ を平面上に描画
  - 2つの同じ長さのベクトル 
    $x_1,\dotsc,x_N$ と
    $y_1,\dotsc,y_N$ を与える
  - $x_1,\dotsc,x_N$ と
    $y_1,\dotsc,y_N$ を持つデータフレームを与える
  #+begin_src R :eval no
    plot(x, y, ...)
    ## x: 1種類目のデータ x_1,...,x_N
    ## y: 2種類目のデータ y_1,...,y_N
    ## ...: "ベクトルの描画"と同じオプションが利用可能
    
    ## データフレームxの変数A，Bの散布図を作成する場合 (こちらの書き方を推奨)
    plot(B ~ A, data=x, ...)
  #+end_src

#+reveal: split
- 例: 国立感染症研究所(~a~)と医療機関(~f~)の検査件数の関係
  #+begin_src R :eval no :exports none :tangle yes
    ### 関数 plot() の使用例 (散布図) 
    ## 国立感染症研究所(a)と医療機関(f)の検査件数の関係
  #+end_src
  #+begin_src R :eval no :tangle yes
    if(Sys.info()["sysname"]=="Darwin") { # MacOSかどうか調べて
      par(family="HiraginoSans-W4")}    # 日本語フォントを指定する
    plot(f ~ a, data=PCR.data, # y軸=f，x軸=a で散布図を作成
         col="blue", pch=19, # 色と形を指定
         xlab=PCR.colname[2], ylab=PCR.colname[7]) # 軸の名前を指定
    ## x軸を日付とすることで日付と検査数の関係を表すことも可能
    plot(f ~ as.Date(date), data=PCR.data, # 線で描画する
         type="l", col="red", # 色と形を指定
         xlab=PCR.colname[1], ylab=PCR.colname[7], # 軸の名前を指定
         main="PCR検査件数の推移") 
  #+end_src

** 基本的な描画 (散布図行列)
- データフレームの2つの列同士の散布図を描画
  #+begin_src R :eval no
    plot(x, ...)
    ## x: データフレーム (数値データのみにすること)
    ## ...: "ベクトルの描画"と同じオプションが利用可能
  #+end_src
- 例: 各検査機関での件数の関係
  #+begin_src R :eval no :exports none :tangle yes
    ### 関数 plot() の使用例 (散布図行列) 
    ## 各検査機関での件数の関係
  #+end_src
  #+begin_src R :eval no :tangle yes
    plot(PCR.data[-1], col="blue", pch=19) # データフレームから1列目を除いて描画
  #+end_src

** 図の保存
- RStudioの機能を使う (少数の場合はこちらが簡便)
  - 右下ペイン *Plots* タブから *Export* をクリック
  - 形式やサイズを指定する
  - クリップボードにコピーもできる
- コマンドで実行する (多数の場合はこちらで処理)
  - 関数 ~pdf()~
  - 関数 ~png()~
  - 関数 ~dev.copy()~
  などを参照

** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- ~pcr_case_daily.csv~ を用いて以下の描画を行いなさい
  - 検疫所(~b~)，地方衛生研究所.保健所(~c~)，民間検査会社(~d~)における
    検査件数の推移
  - 民間検査会社(~d~)，大学等(~e~)，医療機関(~f~)での
    検査件数の関係(散布図)

#+begin_src R :eval no :exports none :tangle yes
  ### 
  ### 練習問題 基本的なグラフの描画
  ###  書き方はいろいろあるので，以下はあくまで一例
  ###
  
  
  ## 検疫所(b)，地方衛生研究所.保健所(c)，民間検査会社(d)における検査件数の推移
  apply(PCR.data[-1],2,max,na.rm=TRUE) # 最大値を確認しておく
  plot(d ~ as.Date(date), data=PCR.data, # 最大値を基準に描画を行う
       type="l", col="orchid", xlab="日付",ylab="検査件数")
  lines(b ~ as.Date(date), data=PCR.data, col="orange")
  lines(c ~ as.Date(date), data=PCR.data, col="tomato")
  ## y軸を対数表示する場合には以下のとおり
  plot(d ~ as.Date(date), data=PCR.data, log="y", # y軸を対数変換
       type="l", col="orchid", xlab="日付",ylab="検査件数")
  lines(b ~ as.Date(date), data=PCR.data, col="orange")
  lines(c ~ as.Date(date), data=PCR.data, col="tomato")
  ## log(0) の計算で警告が出る場合がある
  
  ## 民間検査会社(d)，大学等(e)，医療機関(f)での検査件数の関係(散布図)
  plot(PCR.data[c("d","e","f")], # 必要なデータフレームを抽出
       labels=PCR.colname[5:7], # 変数名を日本語に変更
       col="blue", pch=18) # pch については help(points) を参照
  plot(~ d + e + f, data=PCR.data, # 式を使った指定の方法の例
       labels=PCR.colname[5:7], col="blue", pch=18) 
#+end_src
       

* さまざまなグラフ
#+begin_src R :exports none :tangle yes
  #### "さまざまなグラフ"
#+end_src

** ヒストグラム
- データの値の範囲をいくつかの区間に分割し，
  各区間に含まれるデータの個数を棒グラフにした図
- 棒グラフの幅が区間, 面積が区間に含まれるデータの個数に比例するようにグラフを作成
- データの分布を可視化するのに有効(値の集中とばらつきを調べる)
  #+begin_src R :eval no
    hist(x, breaks="Sturges", freq=NULL)
    ## x: ベクトル
    ## breaks: 区間の分割の仕方を指定．数字を指定するとそれに近い個数に等分割
    ## freq: TRUEを指定すると縦軸はデータ数，
    ##       FALSEを指定すると縦軸はデータ数/全データ数．既定値はTRUE
    ## ...: plotで指定できるオプションが利用可能
  #+end_src

#+reveal: split
- 例: 民間検査会社(~d~)での検査件数の分布
  #+begin_src R :eval no :exports none :tangle yes
    ### 関数 hist() の使用例
    ## 民間検査会社(d)での検査件数の分布
  #+end_src
  #+begin_src R :file figs/02-hist.png :results graphics :tangle yes
    if(Sys.info()["sysname"]=="Darwin"){par(family="HiraginoSans-W4")}
    hist(PCR.data$d, breaks=25, labels=TRUE, # ビンの数と度数表示を指定
         col="lightblue", border="blue", # 中と境界の色を指定
         main="検査件数のヒストグラム", xlab=PCR.colname[5]) # 軸の名前を指定
  #+end_src
  #+NAME:   fig:02-hist
  #+ATTR_HTML: :width 50%
  #+ATTR_LATEX: :width 0.6\linewidth
  [[file:figs/02-hist.png]]
  
** 箱ひげ図
- データ散らばり具合を考察するための図
  - 太線で表示された中央値(第2四分位点)
  - 第1四分位点を下端・第3四分位点を上端とする長方形(箱)
  - 中央値から第1四分位点・第3四分位点までの1.5倍以内にあるデータの
    最小の値・最大の値を下端・上端とする線(ひげ)
  - ひげの外側のデータは点で表示
- 複数のデータの分布の比較の際に有効
  #+begin_src R :eval no
    boxplot(x, ...)      
    ## x: ベクトルまたはデータフレーム
    ##      ベクトルに対しては単一の箱ひげ図
    ##      データフレーム対しては列ごとの箱ひげ図
    ## ...: plotと同様のオプションを指定可能
    
    ## xの変数Bを変数A(質的変数; 性別, 植物の種類など)で分類する場合
    boxplot(B ~ A, data=x, ...)
  #+end_src

#+reveal: split
- 例: 月ごとの大学等(~e~)での検査件数の分布
  #+begin_src R :eval no :exports none :tangle yes
    ### 関数 boxplot() の使用例
    ## 大学等(e)での検査件数の分布(2021年分)
  #+end_src
  #+begin_src R :file figs/02-boxplot.png :results graphics :tangle yes
    if(Sys.info()["sysname"]=="Darwin"){par(family="HiraginoSans-W4")}
    boxplot(e ~ date,
            data=transform(subset(PCR.data, year(date)==2021),
                           date=month(date)),
            col="orange", main="月ごとの検査件数")
  #+end_src
  #+NAME:   fig:02-boxplot
  #+ATTR_HTML: :width 50%
  #+ATTR_LATEX: :width 0.6\linewidth
  [[file:figs/02-boxplot.png]]

** 棒グラフ
- 項目ごとの量を並べて表示した図
- 縦にも横にも並べられる
  #+begin_src R :eval no
    barplot(x, width=1, space=NULL, beside=FALSE,
            legend.text=NULL, args.legend=NULL, ...)
    ## x: ベクトルまたは行列 (データフレームは不可)
    ## width: 棒の幅
    ## space: 棒グラフ間・変数間のスペース
    ## legend.text: 凡例
    ## beside: 複数の変数を縦に並べるか・横に並べるか
    ## args.legend: legendに渡す引数
    ## ...: plotで指定できるオプションが利用可能
  #+end_src

#+reveal: split
- 例: 機関(医療機関まで)ごとの月の検査件数の推移
  #+begin_src R :eval no :exports none :tangle yes
    ### 関数 barplot() の使用例
    ## 機関ごとの月の検査件数の推移 (2021年分)
  #+end_src
  #+begin_src R :file figs/02-barplot.png :results graphics :tangle yes
    if(Sys.info()["sysname"]=="Darwin"){par(family="HiraginoSans-W4")}
    foo <- aggregate(. ~ date, # 集計したデータを保存
                     transform(subset(PCR.data,
                                      subset = year(date)==2021,
                                      select = 1:7),
                               date=month(date)),
                     sum, na.action=na.pass)
    barplot(as.matrix(foo[-1]), col=rainbow(8), # 作成した月(1-8)の色を利用
            names.arg=PCR.colname[2:7], # 変数名を日本語で表示
            beside=TRUE, space=c(.3,3), # 横並びの指定とスペースの設定
            legend.text=foo[,1], args.legend=list(ncol=2)) # 凡例の指定
  #+end_src
  #+NAME:   fig:02-barplot
  #+ATTR_HTML: :width 50%
  #+ATTR_LATEX: :width 0.6\linewidth
  [[file:figs/02-barplot.png]]

** COMMENT 円グラフ
- 項目ごとの比率を円の分割で表示した図
- 時計回りにも反時計回りにも配置できる
  #+BEGIN_SRC R :exports code
    pie(x, clockwise=FALSE, ...)
    ## x: ベクトル
    ## clockwise: 時計回りに書くか否か
    ## ...: plotで指定できるオプションが利用可能
  #+END_SRC

** COMMENT 散布図行列
- 散布図を行列状に並べた図
- データフレームの全ての列の組み合わせの散布図を同時に見ることができる
  #+BEGIN_SRC R :exports code
    pairs(x, ...)
    plot(x,...) # pairsと同じ結果となる
    ## x: データフレーム 
    
    pairs(~ A1 + ... + Ak, data=x, ...)
    plot(~ A1 + ... + Ak, data=x, ...)
    ## 変数A1,...,Akのみ考える場合
  #+END_SRC

** COMMENT 俯瞰図
- 3次元のグラフを2次元に射影した図
  #+BEGIN_SRC R :exports code
    persp(x, y, z, theta=0, phi=15, expand=1)      
    ## x,y,z: x,y,z座標
    ##        (zは行列で，z[i,j]は点(x[i],y[j])に対応する値を与える)
    ## theta,phi: 俯瞰の方向を指定する極座標
    ## expand: z軸の拡大度
    ## ...: plotで指定できるオプションが利用可能
    
    ## 多様な3次元のグラフのためのパッケージがある．
    ## 以下はscatterplot3dパッケージの例
    scatterplot3d(x, color, angle=40)      
    ## x: x,y,z座標を指定するデータフレーム
    ##    (perspのように直接指定することも可能)
    ## color: 色を指定(colではないので注意). 既定値は黒
    ## angle: x軸とy軸の間の角度
    ## ...: plotで指定できるオプションが利用可能
  #+END_SRC

** グラフィクス環境の設定
- グラフィクス関数には様々なオプションがある
- 共通の環境設定のためには関数 ~par()~ を用いる
  - 複数の図の配置: ~mrow~, ~mcol~
  - 余白の設定: ~margin~
  - 日本語フォントの設定: ~family~
  - 他多数 (~?par~ を参照)
  - より進んだグラフィクスの使い方の例は
    ~demo("graphics")~, ~example(関数名)~ を参照

** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 適当なデータに対してグラフの作成を行ってみよう
  - PCR検査件数データ ([[./data/pcr_case_daily.csv][~pcr_case_daily.csv~]])
  - 東京都の気候データ ([[./data/tokyo-weather.csv][~tokyo_weather.csv~]])
  - R言語に用意されているデータ (関数 ~data()~ で一覧表示)

    
* 補足
- より詳細なグラフの描画については以下を参照して下さい
  - 講義ノート
    - R言語の基礎 第4章 (pp53-70)
  - 統計データ解析I スライド 
    - 第4講 データの可視化


* 疑似乱数
#+begin_src R :exports none :tangle yes
  #### "疑似乱数"
#+end_src

** 疑似乱数とは
- コンピューターで生成された数列のこと
- 完全にランダムに数字を発生されることは不可能
- Rの既定値は "Mersenne-Twister法" (~?Random~ 参照)
- 数値シミュレーションにおいて再現性が要請される場合には，
  乱数の "シード値" を指定して再現性を担保 (関数 ~set.seed()~)

** 基本的な乱数
- *ランダムサンプリング*: 与えられた集合の要素を無作為抽出することで発生する乱数
- *二項乱数*: 「確率 $p$ で表がでるコインを $n$ 回投げた際の表が出る回数」に対応する乱数
- *一様乱数*: 決まった区間 $(a, b)$ からランダムに発生する乱数
- *正規乱数*: 平均 $\mu$, 分散 $\sigma^2$ の正規分布に従う乱数

** 乱数を生成する関数
- 関数 ~sample()~: ランダムサンプリング
- 関数 ~rbinom()~: 二項乱数
- 関数 ~runif()~: 一様乱数
- 関数 ~rnorm()~: 正規乱数

** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- ヘルプを用いて以下の関数を調べよ
  - 関数 ~sample()~
  - 関数 ~rbinom()~
  - 関数 ~runif()~
  - 関数 ~rnorm()~
  - 関数 ~set.seed()~
- 以下の試行を実装してみよ
  - サイコロを10回振る
  - 4枚のコインを投げたときの表の枚数

#+begin_src R :eval no :exports none :tangle yes
  ### 
  ### 練習問題 擬似乱数
  ###
  
  ## 関数sampleの使い方
  (x <- 1:10)   # サンプリング対象の集合を定義
  set.seed(123) # 乱数のシード値(任意に決めてよい)を指定
  sample(x, 5)               # xから5つの要素を重複なしでランダムに抽出
  sample(x, 5, replace=TRUE) # xから5つの要素を重複ありでランダムに抽出
  sample(x, length(x))       # xの要素のランダムな並べ替え
  sample(1:6, 10, replace=TRUE)           # サイコロを10回振る実験の再現
  sample(1:6, 10, prob=6:1, replace=TRUE) # 出る目の確率に偏りがある場合
  
  ## 関数rbinomの使い方
  rbinom(10, size=4, prob=0.5) # 表(1)の出る確率が0.5にコインを4枚投げる試行を10回
  rbinom(20, size=4, prob=0.2) # 個数を20, 確率を0.2に変更
  
  ## 関数runifの使い方
  runif(5, min=-1, max=2) # 区間(-1,2)上の一様乱数を5個発生
  runif(5)                # 指定しない場合は区間(0,1)が既定値
  
  ## 関数rnormの使い方
  rnorm(10, mean=5, sd=3) # 平均5，分散3^2の正規乱数を10個発生
  rnorm(10)               # 指定しない場合は mu=0, sd=1 が既定値
  
  ## 関数set.seedについて
  set.seed(1) # 乱数の初期値をseed=1で指定
  runif(5) 
  set.seed(2) # 乱数の初期値をseed=2で指定
  runif(5)    # seed=1の場合と異なる結果
  set.seed(1) # 乱数の初期値をseed=1で指定
  runif(5)    # 初めのseed=1の場合と同じ結果
#+end_src


* モンテカルロ法
#+begin_src R :exports none :tangle yes
  #### "モンテカルロ法"
#+end_src

** モンテカルロ法とは
- 乱数を使った統計実験
- 計算機上でランダムネスを実現 (擬似乱数)
- ランダムネスから導かれる種々の数学的結果を観察

** COMMENT 推定量の分布
- *推定量*: 確率分布の特性値を推測する計算方法
- *推定値*: 観測データから計算した値
- 推定値は観測データに依存して異なる (ばらつく)
- 推定量の分布を求める
  - 理論的な解答: 確率の理論を用いて厳密に求める
  - 数値的な解答: 疑似乱数を用いた数値実験で求める

** COMMENT 標本平均の分布
- 標本平均: 平均値の典型的な推定量
  \begin{equation}
    \bar{X}_n=\frac{1}{n}\sum_{i=1}^{n}X_{i}
  \end{equation}
- データ数が十分大きいとき標本平均の理論的な分布は，
  観測データの分布(正規分布とは限らない)の
  平均 $\mu$ と分散 $\sigma^2$ を用いて与えられる．\\
  (次に述べる *中心極限定理* による)
- 標本平均は平均 $\mu$ ，分散 $\sigma^2/n$ の正規分布に従う．

** 例: 中心極限定理
- 定理
  #+begin_quote
  $X_1,X_2,\dotsc$ を独立同分布な確率変数列とし，
  その平均を $\mu$ ，標準偏差を $\sigma$ とする．
  このとき，すべての実数 $a< b$ に対して
  #+begin_src latex
    \begin{equation}
      P\Bigl(a\leq\frac{\sqrt{n}(\bar{X}_n-\mu)}{\sigma}\leq b \Bigr)
      \to\frac{1}{\sqrt{2\pi}}\int_a^be^{-\frac{x^2}{2}}dx\quad
      (n\to\infty)
    \end{equation}
  #+end_src
  が成り立つ．
  #+end_quote
- 直感的には "多数の独立な確率変数の和はほぼ正規分布に従う" ことを主張している

#+reveal: split
#+begin_src R :eval no :exports none :tangle yes
  ### 中心極限定理
#+end_src
#+begin_src R :eval no :tangle yes
  ## 確率変数の分布の設定 (例: 区間[-1,1]の一様乱数)
  myrand <- function(n) { # n個の乱数を生成
    return(runif(n,min=-1,max=1))
  }
  ## 標本平均の計算
  mymean <- function(n) { # n個のデータで計算
    return(mean(myrand(n)))
  }
#+end_src
#+begin_src R :eval no :tangle yes
  ## Monte-Carlo実験
  set.seed(123) # 実験を再現したい場合はシードを指定する
  mu <- 0; sigma <- sqrt(1/3) # 理論平均と標準偏差
  mc <- 5000 # 実験の繰り返し回数
  for(n in c(1,2,4,8,16)){ # nを変えて実験
    xbars <- replicate(mc, mymean(n)) # mc回実験し標本平均を記録
    hist(xbars, breaks=25, freq=FALSE, # 分布を表示
         col="orchid", border="slateblue",
         xlab=expression(bar(X)), main=paste0("n=",n))
    thdist <- function(x){dnorm(x,mean=mu,sd=sigma/sqrt(n))}
    curve(thdist, add=TRUE, col="orange", lwd=2) # 理論曲線を重ねる
  }
#+end_src
   
** 例: コイン投げの賭け
- AとBの二人で交互にコインを投げる．
  最初に表が出た方を勝ちとするとき，
  AとBそれぞれの勝率はいくつとなるか？
- コイン投げは関数 ~sample()~, ~rbinom()~ などを用いて模擬できる
  #+begin_src R :eval no
    sample(0:1,1) # 0と1が入った壺からから1つ選ぶ
    rbinom(1,size=1,prob=0.5) # 表裏が等確率で出る1枚のコインを1回投げる
  #+end_src

#+reveal: split
#+begin_src R :eval no :exports none :tangle yes
  ### コイン投げの賭け
#+end_src
#+begin_src R :eval no :tangle yes
  ## コイン投げの試行 (いろいろな書き方があるので以下は一例)
  mytrial <- function(){
    while(TRUE){ # 永久に回るループ
      if(rbinom(1,size=1,prob=0.5)==1){return("A")} # Aが表で終了
      if(rbinom(1,size=1,prob=0.5)==1){return("B")} # Bが表で終了
      ## どちらも裏ならもう一度ループ
    }
  }
#+end_src
#+begin_src R :eval no :tangle yes
  ## Monte-Carlo実験
  set.seed(8888) # 実験を再現したい場合はシードを指定する
  mc <- 10000 # 実験回数を設定 
  mydata <- replicate(mc,mytrial()) 
  ## 簡単な集計
  table(mydata)    # 頻度
  table(mydata)/mc # 確率(推定値)
#+end_src

** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 以下の簡単な双六ゲームの実験を行ってみよう
  - ゴールまでのます目は100
  - さいころを振り出た目の数だけ進む
  - ゴールに辿り着くまで繰り返す
  - さいころを振る回数の分布は?

#+begin_src R :eval no :exports none :tangle yes
  ### 
  ### 練習問題 双六ゲーム
  ###
  
  ## 双六の試行
  myTrial <- function(){
    step <- 0 # 最初の位置
    num <- 0  # さいころを振る回数
    while(TRUE){ # 永久に回るループ
      step <- step + sample(1:6,1) # さいころを振る
      num <- num + 1 # 回数を記録
      if(step >= 100) { # ゴールしたか?
        return(num) # 回数を出力して関数を終了
      }
    }
  }
  
  ## 試行を行ってみる
  for(i in 1:10) print(mytrial())
  
  ## Monte-Carlo実験
  set.seed(12345)
  mc <- 10000 # 実験回数を設定 
  myData <- replicate(mc,myTrial()) 
  hist(myData) # ヒストグラムを出力
  summary(myData) # 簡単な集計
#+end_src


* 補足
- より詳細な確率シミュレーションについては以下を参照して下さい
  - 講義ノート
    - R言語の基礎 第5章 (pp71-82)
      - Buffon の針
      - Monty Hall 問題
      - 秘書問題 (最適停止問題)
      などの実装例がある
  - 統計データ解析I スライド 
    - 第5講 確率シミュレーション


* COMMENT ローカル変数
# Local Variables:
# org-latex-listings: minted
# End:
  
