#+TITLE: Rによるデータ解析
#+SUBTITLE: 第1講 - さまざまな多変量解析とR言語の使い方
#+AUTHOR: 村田 昇
#+EMAIL: noboru.murata@gmail.com
#+DATE: 
#+STARTUP: hidestars content indent
# Time-stamp: <2023-10-12 13:39:15 mura>
:REVEAL:
#+SETUPFILE: "./reveal.js/org/mycourse.org"
# C-c C-x C-v でinlineを切り替え
# <m C-i でlatex block (math env用)
# C-c '
:END:

* COMMENT メモ
- 校正に関して記述
- ペインとタブはきちんと使い分ける
- プロジェクトの説明の位置は要検討
- データの読み込みを練習問題に加えるべきかも
- データセットは整理して最初に配付するのが良いかもしれない
  data.zip とすればそのまま使える
  
* R言語の概要
:PROPERTIES:
:ID:       B707BF85-D51F-4D31-9D2A-6E7D3102992A
:END:

#+begin_src R :exports none :tangle no
  setwd("~/Desktop/lectures/u-tokyo/autumn/course")
#+end_src
#+begin_src R :exports none
  ### 第1講 サンプルコード
  #' 
  #' このファイルには資料の中の例題や演習問題の解答例があります
  #' コメント行は "#'" で開始され，RStudio では緑(既定値)で表示されます
  #' コメント内の "@..." は
  #'   @exercise 例題 (スライドの説明と並行して実習)
  #'   @practice 演習 (時間を取って各自で実習)
  #'   @notes 注意 (講義の補足説明)
  #'   @appendix 補遺 (講義では扱い切れなかった付加的な事柄)
  #' のタグで，RStudio では青(既定値)でハイライトされます
  #'
#+end_src

** R言語とは
- 統計計算のための言語と環境の総称
- オープンソース・フリーソフトウェア
- 「パッケージ」を利用して容易に機能拡張が可能
  - パッケージの開発は非常に活発 (現在10000を越える)
  - 最新の技術や方法が簡単に導入できることも多い
- https://www.r-project.org/ (プロジェクトのサイト)

** RStudioとは
- RStudio社が開発している統合開発環境(IDE)
  - R によるデータ解析や統計計算・パッケージ開発を支援
  - OSに依存しない対話型操作環境を提供
- 本講義ではRStudioを用いて説明を行う
- https://www.rstudio.com/ (RStudio社のサイト)
** R言語の得意分野
- *データの分類・集計・整理*
  - 記述統計量 (基本・要約統計量) の計算
  - グラフによる視覚化
  - さまざまな統計分析 (多変量解析を含む)
- プログラムによる *処理の自動化*
- *確率的シミュレーション* (モンテカルロ法) \\
  擬似乱数による不確定性を含む現象の模擬 

** 参考 : R言語のオンラインコース
- RStudio Cloudの自習コース
  https://rstudio.cloud/learn/primers
- Data Campの自習コース
  https://www.datacamp.com/onboarding
  

* 多変量解析
** 多変量解析とは
- 複数の変量からなるデータを分析する手法の総称
  - 回帰分析 : 複数の量を用いて注目する変数の値を説明する
  - 主成分分析 : 全体を説明する少数の特徴量を構成する
  - 判別分析 : 特徴量の違いでカテゴリ分けを行う
  - クラスタ分析 : 特徴量の違いに着目してクラスタを構成する
  - 時系列解析 : 時間とともに変化する現象を記述する
- 機械学習で使われる手法の基礎
  - 教師あり問題 : 回帰分析(量的データ)・判別分析(質的データ)
  - 教師なし問題 : 主成分分析・クラスタ分析
    
** 回帰分析の考え方
- ある変数(目的変数)を別の変数によって説明・予測するための関係式(回帰式)を構成する
  - 単回帰 : 一つの変数で目的変数を説明する
  - 重回帰 : 複数の変数で目的変数を説明する
- [[color:green][分析の事例]]
  - 広告宣伝費と商品の売上を予測する式を作り，広告効果があるかどうか判定する
  - 築年数・駅からの距離・広さ・間取りで家賃を説明する式を作り，新規に家賃を設定する際に利用する

# ある1種類の変数/データを別の変数/データ(1種類もしくは複数)によって説明もしくは予測するための関係式(回帰方程式)を構成することを目的とする分析法
# ある量(説明変数)を用いて注目する量(目的変数)を説明する

** 単回帰の例 (~MASS::Animals~)
#+caption: 体重と脳の重さ
#+name:   tbl:brainbody
|                 | body [kg] | brain [g] |
|-----------------+-----------+-----------|
| Mountain beaver |     1.350 |       8.1 |
| Cow             |   465.000 |     423.0 |
| Grey wolf       |    36.330 |     119.5 |
| Goat            |    27.660 |     115.0 |
| Guinea pig      |     1.040 |       5.5 |
| Dipliodocus     | 11700.000 |      50.0 |
| Asian elephant  |  2547.000 |    4603.0 |
| Donkey          |   187.100 |     419.0 |
| ...             |       ... |       ... |

#+reveal: split
#+caption: 体重と脳の重さの関係 (単回帰)
#+name:   fig:r-brainbody05
#+attr_html: :width 55% :height 55%
#+attr_latex: :width 0.6\linewidth
[[file:./figs/r-brainbody05.png]]

** 重回帰の例 (~wine.csv~)
#+caption: ワインの価格と生産環境
#+name:   tbl:wine
| 年号 | 価格(対数) | 冬の降雨 |    気温 | 秋の降雨 | 経過年 |
|------+------------+----------+---------+----------+--------|
| 1952 |   -0.99868 |      600 | 17.1167 |      160 |     31 |
| 1953 |    -0.4544 |      690 | 16.7333 |       80 |     30 |
| 1954 |         NA |      430 | 15.3833 |      180 |     29 |
| 1955 |   -0.80796 |      502 |   17.15 |      130 |     28 |
| 1956 |         NA |      440 |   15.65 |      140 |     27 |
| 1957 |   -1.50926 |      420 | 16.1333 |      110 |     26 |
| 1958 |   -1.71655 |      582 | 16.4167 |      187 |     25 |
| 1959 |     -0.418 |      485 | 17.4833 |      187 |     24 |
|  ... |            |          |         |          |        |

#+reveal: split
#+caption: ワインの価格と生産環境の関係
#+name:   fig:r-wine01
#+attr_html: :width 55% :height 55%
#+attr_latex: :width 0.6\linewidth
[[file:./figs/r-wine01.png]]

#+reveal: split
#+caption: 生産環境によるワイン価格の予測 (重回帰)
#+name:   fig:r-wine05
#+attr_html: :width 55% :height 55%
#+attr_latex: :width 0.6\linewidth
[[file:./figs/r-wine05.png]]

** 主成分分析の考え方
- 多数の変数が与えられたときに，変数のもつ構造を効率的に記述できる少数個の特徴量を構成する
- [[color:green][分析の事例]]
  - 野球選手の打撃成績(打率，本塁打数，打点など)から，打者としての特徴を記述する指標を作成する
  - 複数銘柄からなる株価の時系列データから，市場全体の変動を記述する総合指標を作成する

# 全体を説明する少数の特徴量を構成する

** 主成分分析の例 (~jpamenity.csv~)
#+caption: 県別の生活環境(一部)
#+name:   tbl:jpamenity
|        | 昼夜人口比 | 年少人口比 | 老年人口比 | 人口増減率 |
|--------+------------+------------+------------+------------|
| 北海道 |      100.0 |       11.7 |       26.0 |      -0.47 |
| 青森県 |      100.0 |       12.1 |       27.0 |      -0.95 |
| 岩手県 |       99.7 |       12.4 |       27.9 |      -0.84 |
| 宮城県 |      100.2 |       13.0 |       22.9 |      -0.09 |
| 秋田県 |       99.9 |       11.1 |       30.7 |      -1.12 |
| 山形県 |       99.8 |       12.6 |       28.3 |      -0.78 |
| 福島県 |       99.6 |       12.9 |       26.1 |      -1.41 |
| 茨城県 |       97.2 |       13.2 |       23.8 |      -0.51 |
| ...    |         .. |         .. |         .. |         .. |

#+reveal: split
#+caption: 県別の生活環境(人口動態)の散布図 
#+name:   fig:p-jpamenity01
#+attr_html: :width 55% :height 55%
#+attr_latex: :width 0.6\linewidth
[[file:./figs/p-jpamenity01.png]]

#+reveal: split
#+caption: 県別の生活環境(教育・労働)の散布図 
#+name:   fig:p-jpamenity02
#+attr_html: :width 55% :height 55%
#+attr_latex: :width 0.6\linewidth
[[file:./figs/p-jpamenity02.png]]

#+reveal: split
#+caption: 県別の生活環境(貯蓄・余暇)の散布図 
#+name:   fig:p-jpamenity03
#+attr_html: :width 55% :height 55%
#+attr_latex: :width 0.6\linewidth
[[file:./figs/p-jpamenity03.png]]

#+reveal: split
#+caption: 県別の生活環境の主成分分析
#+name:   fig:p-jpamenity06
#+attr_html: :width 55% :height 55%
#+attr_latex: :width 0.6\linewidth
[[file:./figs/p-jpamenity06.png]]

** 判別分析の考え方
- ある個体が複数のクラスのいずれかに属するとき，その個体の特徴量からどのクラスに属するかを予測するモデルを構築する
- [[color:green][分析の事例]]
  - 食道がんを患っている人とそうでない人を，年齢・飲酒量・喫煙度から判別する
  - 銀行が融資判断をするために，企業の財務データから，その企業が期間内に債務不履行となるか否かを予測する

# - 花の種類を，その花の花弁の幅・長さおよび萼片(がくへん)の幅・長さから判別する
# 特徴量の違いでカテゴリ分けを行う

** 判別分析の例 (~MASS::biopsy~)
#+caption: 乳癌患者の生研検査
#+name:   tbl:biopsy
|      ID | V1 | V2 | V3 | V4 | V5 | V6 | V7 | V8 | V9 | class     |
|---------+----+----+----+----+----+----+----+----+----+-----------|
| 1000025 |  5 |  1 |  1 |  1 |  2 |  1 |  3 |  1 |  1 | benign    |
| 1002945 |  5 |  4 |  4 |  5 |  7 | 10 |  3 |  2 |  1 | benign    |
| 1015425 |  3 |  1 |  1 |  1 |  2 |  2 |  3 |  1 |  1 | benign    |
| 1016277 |  6 |  8 |  8 |  1 |  3 |  4 |  3 |  7 |  1 | benign    |
| 1017023 |  4 |  1 |  1 |  3 |  2 |  1 |  3 |  1 |  1 | benign    |
| 1017122 |  8 | 10 | 10 |  8 |  7 | 10 |  9 |  7 |  1 | malignant |
| 1018099 |  1 |  1 |  1 |  1 |  2 | 10 |  3 |  1 |  1 | benign    |
| 1018561 |  2 |  1 |  2 |  1 |  2 |  1 |  3 |  1 |  1 | benign    |
|     ... | .. | .. | .. | .. | .. | .. | .. | .. | .. | ...       |

#+reveal: split
#+caption: 乳癌患者(良性・悪性)の生研検査の散布図
#+name:   fig:d-biopsy01
#+attr_html: :width 55% :height 55%
#+attr_latex: :width 0.6\linewidth
[[file:./figs/d-biopsy01.png]]

#+reveal: split
#+caption: 生研検査の主成分分析
#+name:   fig:d-biopsy02
#+attr_html: :width 55% :height 55%
#+attr_latex: :width 0.6\linewidth
[[file:./figs/d-biopsy02.png]]

#+reveal: split
#+caption: 生研検査による乳癌患者の判別分析
#+name:   fig:d-biopsy03
#+attr_html: :width 55% :height 55%
#+attr_latex: :width 0.6\linewidth
[[file:./figs/d-biopsy03.png]]

** クラスタ分析の考え方
- 特徴量の違いに着目して，妥当な個体のグループ(クラスタ)を構成する
  - 階層的な方法 : 系統樹を作成する
  - 非階層的な方法 : グループの代表値を推定する
- [[color:green][分析の事例]]
  - 映画に関するアンケート調査から潜在的なジャンル(グループ)を抽出する
  - 顧客の購買履歴から，嗜好の異なる顧客グループに分類し，グループごとの販売戦略を立てる

** クラスタ分析の例 (~omusubi.csv~)
#+caption: おむすびの具に関するアンケート
#+name:   tbl:omusubi
|        |    梅 |    鮭 | 昆布 |   鰹 |  明太 |  鱈子 |  ツナ |    他 |
|--------+-------+-------+------+------+-------+-------+-------+-------|
| 北海道 | 13.86 | 27.94 | 5.58 | 5.26 |  9.26 | 15.06 | 11.61 | 11.39 |
| 青森   | 14.93 | 30.79 | 7.01 | 2.43 | 10.36 | 11.58 | 11.58 | 11.28 |
| 岩手   | 17.91 | 23.13 | 5.22 | 3.35 | 17.91 | 10.07 | 10.44 | 11.94 |
| 宮城   | 15.16 |  29.5 |   10 | 1.66 | 14.83 |  8.83 | 12.83 |  7.16 |
| 秋田   | 10.63 | 31.38 | 5.31 | 3.19 | 14.89 | 13.29 | 10.63 | 10.63 |
| 山形   | 16.58 | 20.27 | 8.29 | 1.38 | 18.89 | 10.13 |  12.9 | 11.52 |
| 福島   | 12.37 | 21.99 | 8.93 | 3.43 | 16.49 |  9.62 | 19.24 |   7.9 |
| 茨城   | 15.42 | 26.49 | 7.98 | 2.54 | 18.33 | 11.79 | 11.79 |  5.62 |
| ...    |    .. |    .. |   .. |   .. |    .. |    .. |    .. |    .. |

#+reveal: split
#+caption: おむすびの具に関するアンケート分析 (県別の集計)
#+name:   fig:c-omusubi01
#+attr_html: :width 55% :height 55%
#+attr_latex: :width 0.6\linewidth
[[file:./figs/c-omusubi01.png]]

#+reveal: split
#+caption: アンケート結果にもとづく県のクラスタ分析
#+name:   fig:c-omusubi02
#+attr_html: :width 55% :height 55%
#+attr_latex: :width 0.6\linewidth
[[file:./figs/c-omusubi02.png]]

** 時系列解析の考え方
- 時間とともに変化する現象を記述するために，未来の値を過去の値で近似する式を構成する
  - 自己回帰 (ARモデル) : 過去の影響の記述
  - 移動平均 (MAモデル) : 記憶のある不確定性
- [[color:green][分析の事例]]
  - 市町村の過去の年齢別の人口変動から将来の人口比率の推移を予測する
  - 食品・飲料の季節ごとの販売履歴から，将来の需要量を予測して生産計画を立てる
        
** 時系列解析の例 (~datasets::AirPassengers~)
#+caption: 米国航空機旅客量の変遷
#+name:   tbl:airpass
|      | Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | ... |
|------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----|
| 1949 | 112 | 118 | 132 | 129 | 121 | 135 | 148 | 148 | 136 | ... |
| 1950 | 115 | 126 | 141 | 135 | 125 | 149 | 170 | 170 | 158 | ... |
| 1951 | 145 | 150 | 178 | 163 | 172 | 178 | 199 | 199 | 184 | ... |
| 1952 | 171 | 180 | 193 | 181 | 183 | 218 | 230 | 242 | 209 | ... |
| 1953 | 196 | 196 | 236 | 235 | 229 | 243 | 264 | 272 | 237 | ... |
| 1954 | 204 | 188 | 235 | 227 | 234 | 264 | 302 | 293 | 259 | ... |
| 1955 | 242 | 233 | 267 | 269 | 270 | 315 | 364 | 347 | 312 | ... |
|  ... |  .. |  .. |  .. |  .. |  .. |  .. |  .. |  .. |  .. | ... |

# |      | Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec |
# | 1949 | 112 | 118 | 132 | 129 | 121 | 135 | 148 | 148 | 136 | 119 | 104 | 118 |
# | 1950 | 115 | 126 | 141 | 135 | 125 | 149 | 170 | 170 | 158 | 133 | 114 | 140 |
# | 1951 | 145 | 150 | 178 | 163 | 172 | 178 | 199 | 199 | 184 | 162 | 146 | 166 |
# | 1952 | 171 | 180 | 193 | 181 | 183 | 218 | 230 | 242 | 209 | 191 | 172 | 194 |
# | 1953 | 196 | 196 | 236 | 235 | 229 | 243 | 264 | 272 | 237 | 211 | 180 | 201 |
# | 1954 | 204 | 188 | 235 | 227 | 234 | 264 | 302 | 293 | 259 | 229 | 203 | 229 |
# | 1955 | 242 | 233 | 267 | 269 | 270 | 315 | 364 | 347 | 312 | 274 | 237 | 278 |
# | 1956 | 284 | 277 | 317 | 313 | 318 | 374 | 413 | 405 | 355 | 306 | 271 | 306 |
# |  ... |     |     |     |     |     |     |     |     |     |     |     |     |

#+reveal: split
#+caption: 米国航空機旅客量の変遷
#+name:   fig:t-airpass01
#+attr_html: :width 55% :height 55%
#+attr_latex: :width 0.6\linewidth
[[file:./figs/t-airpass01.png]]

#+reveal: split
#+caption: 階差時系列の自己相関分析
#+name:   fig:t-airpass04
#+attr_html: :width 55% :height 55%
#+attr_latex: :width 0.6\linewidth
[[file:./figs/t-airpass04.png]]

#+reveal: split
#+caption: 航空機旅客量の予測 (SARIMAモデルによる)
#+name:   fig:t-airpass12
#+attr_html: :width 55% :height 55%
#+attr_latex: :width 0.6\linewidth
[[file:./figs/t-airpass12.png]]


* RStudio の構成
** 起動画面
- 以下 *RStudio* を用いて説明する
- 複数の *タブ* (tab; つまみ) を含む4つの *ペイン* (pane; 枠) が立ち上がる
  - 左上 : エディタ・表など (開いていない場合もある)
  - 左下 : コンソール・ターミナルなど
  - 右上 : 作業環境内の変数・コマンド履歴など
  - 右下 : パッケージ・グラフィックス・ヘルプなど
- ペインの配置や数は個別に設定することができる
  - メニュー : *Tools > Global Options* で設定

** コンソール (左下ペイン)
- R言語で記述されたコマンドを入力する
  - 例えば以下のような計算を行うことができる
    #+begin_src R :eval no :tangle no
      #' 一般的な数式を入力すれば計算機として使える
      #' "#" 以降はコメントとして無視される
      1 + 2 + 3 + 4 # 空白は無視される
      sin(pi/3) / cos(pi/3) # tan(pi/3) になるはず
    #+end_src
  - コンソール上で終了を指示する以下のコマンドを入力すれば
    R を終了させることができる
    #+begin_src R :eval no :tangle no
      #' R の終了には q() または quit() を用いる
      q()
    #+end_src
    - メニューの *Quit RStudio* も利用可能
    - 終了できない場合はOSの機能で強制終了する必要がある
    
** エディタ (左上ペイン)
- コマンドを記述したファイルを扱う
- 一連のコマンドをまとめたり，修正しながら実行するための機能
  - コンソールに入力したコマンドは直ちに実行されてしまう
  - コマンドを実行順に記述したファイル *R Script* を作成 
  - ファイル(の一部)を実行
  - ファイルを保存
- 同一ファイル内でプログラムと文書を記述する機能もあるが，本講義では扱わない (R Markdown, Quarto など)

** ヘルプ (右下ペイン)
- 各関数の詳細を記述したヘルプが利用できる
  - 機能，引数名，引数の既定値，実行例などが参照できる
- 右下ペイン *Help* タブ右上の検索窓から探索
- ヘルプ内の検索はその下の *Find in Topic* で可能
- コンソール内では関数 ~help()~ や ~?~ などを利用

** パッケージ (右下ペイン)
- パッケージを用いて機能を拡張する
- RStudio でのインストール手順
  - 右下ペイン *Package* タブをクリック
  - 左上の *Install* をクリック
  - パッケージ名を入力し *Install* をクリック
- 利用可能なパッケージの情報は
  右下ペイン *Package* タブで確認できる

** 作業ディレクトリ
- プログラムが実行されるディレクトリ(フォルダ)
- 作業ディレクトリにあるファイルの読み書きはパスを指定する必要がない
- 現在の作業ディレクトリは *Console* タブで確認
- メニュー : *Session > Set Working Directory* で指定
  - 読み込んだファイルの場所を選択
  - *Files* タブ (右下ペイン) の場所を選択 (*More* からも選択可)
  - ディレクトリを直接選択
    
** プロジェクト
- 作業環境をまとめて設定・保存する機能
  - 作成したプロジェクトは *Project* ボタン(右上)から選択可能
  - いつでもプロジェクトを中断可能
  - プロジェクト毎に履歴や変数を保存可能
  - 複数のプロジェクトを定義可能    
- 一般的なプロジェクトの作成手順
  - *Project* ボタンから *New Project* を選択
  - *Create Project* ダイアログで *New Directory* を選択
    - 既にあるディレクトリを用いる場合は *Existing Directory* 
    - Github などを利用する場合は *Version Control* 
  - *Project Type* ダイアログで *New Project* を選択
  - *Directry Name* とその親ディレクトリを指定
# - 中断するときは *Close Project* を選択
  
** 終了時の注意
- 終了時にコンソールに以下のメッセージが表示される場合がある
  #+begin_src R :eval no :tangle no
    > q()
    Save workspace image? [y/n/c]:     
  #+end_src
- 作業で使った変数などをセーブするか尋ねている
  - ~y~ を入力: セーブする (yesの略)
  - ~n~ を入力: セーブしない (noの略)
  - ~c~ を入力: Rの終了をキャンセルする (cancelの略)
- セーブした場合次回起動時に読み込まれる 


* 基本的な使い方
** 式の入力
- 四則演算や数学関数は直感的な文法で計算可能

#+caption: 基本的な演算と関数
|----------+--------------------------|
| 加減乗除   | ~+, -, *, /~             |
| 羃乗      | ~^~ または ~**~            |
| 三角関数   | ~sin(), cos(), tan()~    |
| 逆三角関数 | ~asin(), acos(), atan()~ |
| 指数関数   | ~exp()~                  |
| 対数関数   | ~log(), log10(), log2()~ |
| 双曲線関数 | ~sinh(), cosh(), tanh()~ |
| 平方根     | ~sqrt()~                 |
| 絶対値     | ~abs()~                  |
|----------+--------------------------|

#  - + (加算)，- (減算)，* (乗算)，/ (除算)，＾または** (ベキ乗)
#  - sin, cos, tan (三角関数)，exp (指数関数)，log (対数関数)

** 電卓として使う
:PROPERTIES:
:ID:       BD3AC29D-E103-43F0-BE1D-0B827AFE1DE6
:END:
- [[color:green][コンソール上での計算例]]
  #+begin_src R :exports none
    #' @exercise コンソール上での計算
  #+end_src
  #+begin_src R
    #' 与えられた式の計算をコンソール上で実行してみよう
    #' 1 x 2 + 3^2 の計算
    1 * 2 + 3^2
    #' sin(2π) の計算
    sin(2*pi)
    #' √2 + |-0.6| の計算
    sqrt(2) + abs(-0.6)
  #+end_src
  #+begin_src R :exports none
    #' @notes
    #' 演算子の前後に空白があっても良い(空白は可読性のために適宜利用する)
    #' 2文字以上の演算子の途中には空白は入れられない(例: 羃乗の別記法の"**")
    #' πは "pi" として定義されている
    #' "e-16" は10の-16乗の意味
    #' 計算結果は数値誤差のため厳密に0にならないことがある
    #' 利用環境下で扱うことのできる数値については ".Machine" に保存されている
    #' 特に上記の丸め誤差については ".Machine$double.eps" を参照
  #+end_src
- 入力内容は右上の *History* タブで確認可能
  
** エディタから実行する
- 新規ファイルの作成 (以下のいずれか)
  - 左上の *+* から
    *R Script* を選択
  - *File* から
    *New File* を選択，
    更に *R Script* を選択
- エディタ上でコマンドを記述
- 実行範囲の選択
  - 一行のみ: カーソルをその行に移動
  - 複数行: クリックしてながら移動して選択する
- 選択範囲の実行 (以下のいずれか)
  - 左上の *Run* をクリック
  - *Code* から 
    *Selected Line(s)* を選択
    (Ctrl/Command+Enter)

** R Script ファイルを保存する
- 以下のいずれかで保存することができる
  - 左上のディスクのマークをクリック
  - *File* から 
    *Save* を選択 (Ctrl/Command+S)
- ファイル作成に関する注意
  - 保存する時にファイル名の入力が求められる
  - 拡張子は通常
    *.R* または
    *.r* を利用する
  - *#* 以降の文字列は実行されないのでコメントとして有用

** 関数
- 関数の取り扱いは一般的な計算機言語とほぼ同様
  - 関数は引数とその値を指定して実行(引数がない場合もある)
  - 引数名は順序を守れば省略可能
- 関数の呼び出し方 (関数名を ~f~ とする)
  #+begin_src R :eval no :tangle no
    f(arg1 = value1, arg2 = value2) # 擬似コード
    #' arg1, arg2 は引数の名前，value1, value2 は引数に渡す値を表す
    f(value1, value2) # 上と同値．順序に注意
  #+end_src
  - *擬似コード* = 実行しても動かないコード
- 実装されている関数の使い方は ~help(関数名)~ または ~?関数名~ で
  ヘルプが表示される

  # - 引数が存在しない，
  #  もしくはすべての引数に対し既定値が設定されている関数もある．
  #  例えば ~f~ がそのような関数だった場合，
  #  コンソール上で
  #  #+begin_src R :exports code
  #  f()    
  #  #+end_src
  #  を実行すると引数=既定値として関数の内容が実行される
  # - 典型例はRを終了する関数 ~q()~

** 関数の実行例
:PROPERTIES:
:ID:       75EAC6A6-558A-4665-9824-8818A6023773
:END:
- [[color:green][正弦関数の計算]]
  #+begin_src R :exports none
    #' @exercise 関数の実行
  #+end_src
  #+begin_src R :eval no
    #' 正弦関数(引数が1つ)の計算例
    sin(x = pi/2) 
    sin(pi/2) # 引数名は省略でき，前の行とこの行は同じ結果になる
  #+end_src
- [[color:green][対数関数の計算]]
  #+begin_src R :eval no
    #' 対数関数(引数が2つ)の計算例
    #' 以下は擬似コード．a, b を適当な数値に置き換えて実行しなさい
    log(a, b) # 底を b とする a の対数 
    log(x = a, base = b) #上と同値
    log(base = b, x = a) #上と同値(引数名があれば順序は自由に変えられる)
    log(b, a) # = log(x=b,base=a) (引数名がなければ規定の順序で解釈される)
    log(a) # 自然対数 =log(a,base=exp(1))
  #+end_src
  
** COMMENT 関数の実行
- 関数の取り扱いは一般的な計算機言語とほぼ同様
- 関数は引数とその値を指定して実行
- [[color:green][正弦関数の計算]]
  #+begin_src R :eval no
    sin(x = pi/2)
    ## 上と同値．関数の定義どおりの順序であれば引数の名前は省略可能
    sin(pi/2) 
  #+end_src
- [[color:green][対数関数の計算]]
  #+begin_src R :eval no
    ## xやbに具体的な数値を代入して実行しなさい
    log(x, b) # 底をbとする対数
    log(x = x, base = b) #上と同値
    log(base = b, x = x) #上と同値
    log(b,x) # = log(x=b,base=x) 
    log(x) # base を省略すると自然対数 =log(x,base=exp(1))
  #+end_src

** ヘルプ機能
- 各関数の詳細を記述したヘルプが用意されている
  - Description (機能の概要)
  - Usage (関数の呼び出し方)
  - Arguments (関数の引数)
  - Value (関数の返り値)
  - Examples (実行例)
- ヘルプに関連する関数
  - ~help()~ (使い方や例の表示)
  - ~example()~ (例を実際に実行してくれる)
  - ~help.search()~ (キーワード検索)
- 右下ペイン *Help* タブの利用
  - 右上にある検索窓でヘルプを参照可能
  - 左上にある検索窓はヘルプ内を検索可能

  # - 関数の正確な名前が分からない場合，
  #   キーワードを渡すことで関連するトピックをもつ関数を検索できる
  # - {{{example(例)}}} 
  #   三角関数を計算する関数の名前がわからない場合, 
  #   三角関数は英語でtrigonometric functionであることから
  #   #+begin_src R :exports both :results none
  #   help.search(trigonometric)
  #   #+end_src
  #   または
  #   #+begin_src R :exports both :results none
  #   ??trigonometric
  #   #+end_src
  #   を実行してみればよい

** ヘルプ機能の利用例
:PROPERTIES:
:ID:       B867718F-14B2-4BF6-89F2-83EA06A4DD30
:END:
- [[color:green][ヘルプの使い方]] 
  #+begin_src R :exports none
    #' @exercise ヘルプの使い方
  #+end_src
  #+begin_src R :eval no
    #' 関数 log() に関するヘルプの例
    help(log) # Helpタブに結果は表示される
    ?log # 上と同値
    example(log) # ヘルプ内の例を実行
    help.search("log") # "log"に関連する項目は？
    ??"log" # 上と同値
  #+end_src
  - 右下ペインの *Help* タブに表示される

** データ型
- Rではさまざまな数値を扱うことができる
  - 実数および複素数 (指数表記にも対応)
  - 無限大や不定な数など特殊なものにも対応

#+caption: 代表的なデータ型
| 型の名称      | 役割             | 例                       |
|-------------+-----------------+-------------------------|
| ~numeric~   | (広義の)実数を表す | ~1, pi, NaN~            |
| ~complex~   | 複素数を表す       | ~1i, 3-4i~              |
| ~character~ | 文字列を表す       | ~"foo", "Hello World!"~ |
| ~logical~   | 論理値(真偽)を表す | ~TRUE, FALSE, 3<4, NA~  |

** オブジェクト
- 変数，関数，計算結果などを *オブジェクト* と呼ぶ
- 文字列を変数名としてオブジェクトを保持することができる
- オブジェクトの内容を別のオブジェクトに代入することができる
- 保持しているオブジェクトの情報は右上ペインの
  *Environment* タブで確認できる

** オブジェクトの代入の例
:PROPERTIES:
:ID:       D8FAB648-8B58-400E-99B4-C8CC28F3B152
:END:
- [[color:green][代入操作の例]]
  #+begin_src R
    #' 数値を変数 foo に代入する
    (foo <- 3) # foo <- 3; print(foo) と等価
    #' 変数 foo を用いて計算し，結果を bar に代入する
    bar <- sin(2/3*pi) + cos(foo * pi/4) # 計算結果は表示されない
    #' 変数 bar の内容を表示する
    print(bar)
  #+end_src
  - 計算結果や良く使う文字列の保存に利用できる
  - 変数名は自由に決められるが，
    予約語 ~c, q, t, C, D, F, I, T~ には注意が必要
** 自作関数
- 他の言語と同様にRでも関数を定義できる   
- 関数の定義には関数 ~function()~ を利用する 
  #+begin_src R :eval no :tangle no
    #' 関数 function() の使い方 (擬似コード)
    関数名 <- function(引数){ # 計算ブロックの開始
      ## このブロック内に必要な手続きを記述する．複数行に渡って構わない
      return(返値) # 計算結果を明示的に示す
    } # ブロックの終了
  #+end_src

** 自作関数の例
:PROPERTIES:
:ID:       2BFD2EE5-86DA-4F65-8B45-C5C839F0769D
:END:
- [[color:green][縦と横の長さを与えて長方形の面積を計算]]
  #+begin_src R :exports none
    #' @exercise 自作関数の定義
  #+end_src
  #+begin_src R
    #' 縦の長さ a, 横の長さ b (既定値は1) の長方形の面積
    foo <- function(a, b = 1){ 
      out <- a * b 
      return(out) # 計算結果を外に返却
    }
    #' 実行例
    foo(2, 3) # foo(a = 2, b = 3) と同義
    foo(2) # foo(a = 2, b = 1) と同義
  #+end_src

#+reveal: split
- [[color:green][無名関数 (anonymous function) の作り方]]
  #+begin_src R
    #' 変数や関数を定義して計算する方法
    (x <- 1:10/10)
    foo <- function(x) sin(x)/x # 式の計算結果を返却(returnを省略可)
    foo(x)
    #' 変数や関数を定義せずに計算する方法
    (function(x) sin(x)/x)(1:10/10)
    (\(x) sin(x)/x)(1:10/10) # R 4.1 以降の短縮表現
  #+end_src
  - オブジェクト(変数や関数)を作成する必要がない場合に有用

#+reveal: split
- [[color:green][練習]]
  #+begin_quote
  - R の関数 integrate() についてヘルプを調べなさい．
  - 以下の関数の定積分を求めなさい．
    \begin{align}
      f(x)&=\frac{1}{1+x^{2}},\quad x\in[0,1]\\
      g(x)&=\exp\left( -\frac{x^{2}}{2} \right),\quad x\in\mathbb{R}
    \end{align}
  #+end_quote

#+reveal: split
- [[color:green][関数 integrate() を利用して定積分を計算]]
  #+begin_src R
    #' 関数 1/(1+x^2) を区間 [0,1] で積分 (関数オブジェクトを渡す書き方)
    f <- function(x) 1/(1+x^2) # 関数を定義
    integrate(f, 0, 1) # pi/4 
    #' 関数 e^(-x^2/2) を実軸全体で積分(Gauss積分) (関数を定義しない書き方)
    integrate(\(x)exp(-x^2/2), -Inf, Inf) # sqrt(2*pi)
  #+end_src
    
** COMMENT データの読み込み
- ファイルにまとめられたデータを読み込むことができる
- 対応する形式は csv・excel など
- 右下ペインの *Files* を利用する
  - ファイルが保存されているディレクトリに移動
  - ファイルをクリック
  - *View File* (見るだけ) か *Import Dataset* (読み込み) を選択
- この機能は次回以降のデータの整理で活躍する


* 次回の予定
- データの取り扱い
- 描画の基礎
- 確率シミュレーション


* Footnotes
* COMMENT ローカル変数
# Local Variables:
# org-latex-listings: minted
# End:
